/*
 * Oxford Brookes University Secure Email Proxy 
 * Copyright (C) 2002/3 Oxford Brookes University Secure Email Project
 * http://secemail.brookes.ac.uk
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * The Secure Email Project is:
 * 
 * Marcus Povey <mpovey@brookes.ac.uk> or <icewing@dushka.co.uk>
 * Damian Branigan <dbranigan@brookes.ac.uk>
 * George Davson <gdavson@brookes.ac.uk>
 * David Duce <daduce@brookes.ac.uk>
 * Simon Hogg <simon.hogg@brookes.ac.uk>
 * Faye Mitchell <frmitchell@brookes.ac.uk>
 * 
 * For further information visit the secure email project website.
 */

package ui;

import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JDialog;
import system.*;
import java.awt.Component;
import javax.swing.JFileChooser;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListDataEvent;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.DefaultTreeModel;
import java.util.*;
import java.math.BigInteger;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import core.exceptions.*;
import core.keyhandlers.KeyObject;
import core.keyhandlers.KeyData;
import core.keyhandlers.KeyFile;
import core.keyhandlers.KeyServer;
import core.keyhandlers.OpenPGPPublicKeyring;
import core.keyhandlers.OpenPGPSecretKeyring;
import core.keyhandlers.KeyHandler;
import core.keyhandlers.KeyIdentifier;
import core.keyhandlers.identifiers.*;
import core.algorithmhandlers.*;
import core.algorithmhandlers.openpgp.util.*;
import openpgp.keystore.*;
import openpgp.keystore.exceptions.*;
import openpgp.keystore.model.*;
import openpgp.keystore.model.keyhandlers.*;
import openpgp.keystore.tree.*;
import openpgp.keystore.util.*;

/**
 * <p>A class that displays an OpenPGP key management window.</p>
 */
public class OpenPGPKeyManager extends javax.swing.JFrame implements Observer {
//public class OpenPGPKeyManager extends javax.swing.JDialog {
    
    /** Creates new form OpenPGPKeyManager */
    public OpenPGPKeyManager(ConfigurationData configFile) {
//        super(frame, modal);
        configurationData = configFile;
        debug.Debug.setLevel(2);
        keyParser = new KeyParser();
        long t1, t2, t3;
        t1 = System.currentTimeMillis();
        initComponents();
        t2 = System.currentTimeMillis();
        loadKeyStoreModel();
        loadKeySearchComponents();
        loadResultsModel();
        t3 = System.currentTimeMillis();
        debug.Debug.println(1, "xxx initComponents() took " + (t2-t1) + "ms" +
                ", loadKeyringModel() took " + (t3-t2) + "ms");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        keyPopupMenu = new javax.swing.JPopupMenu();
        deleteKeyItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        revokePrimarySigningKeyItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JSeparator();
        publicKeyExportMenu = new javax.swing.JMenu();
        exportPublicKeyToAscFileItem = new javax.swing.JMenuItem();
        exportPublicKeyToBinFileItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        exportPublicKeyToKeyServerItem = new javax.swing.JMenuItem();
        privateKeyExportMenu = new javax.swing.JMenu();
        exportPrivateKeyToAscFileItem = new javax.swing.JMenuItem();
        exportPrivateKeyToBinFileItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        addEmailAddressItem = new javax.swing.JMenuItem();
        addSubkeyItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JSeparator();
        keyPropsItem = new javax.swing.JMenuItem();
        subkeyPopupMenu = new javax.swing.JPopupMenu();
        deleteSubkeyItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JSeparator();
        revokeSubkeyItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        subkeyPropsItem = new javax.swing.JMenuItem();
        userPopupMenu = new javax.swing.JPopupMenu();
        deleteUserItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        signUserBindingItem = new javax.swing.JMenuItem();
        sigPopupMenu = new javax.swing.JPopupMenu();
        deleteSigItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        revokeSigItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        sigPropsItem = new javax.swing.JMenuItem();
        keyringPopupMenu = new javax.swing.JPopupMenu();
        createNewKeyMenuItem = new javax.swing.JMenuItem();
        jSeparator11 = new javax.swing.JSeparator();
        publicKeyringExportMenu = new javax.swing.JMenu();
        exportPublicKeyringToAscFileItem = new javax.swing.JMenuItem();
        exportPublicKeyringToBinFileItem = new javax.swing.JMenuItem();
        privateKeyringExportMenu = new javax.swing.JMenu();
        exportPrivateKeyringToAscFileItem = new javax.swing.JMenuItem();
        exportPrivateKeyringToBinFileItem = new javax.swing.JMenuItem();
        jFileChooser1 = new javax.swing.JFileChooser();
        sigPropsDialog = new javax.swing.JDialog();
        jPanel31 = new javax.swing.JPanel();
        sigPropsMessageLabel = new javax.swing.JLabel();
        jPanel30 = new javax.swing.JPanel();
        sigPropsKeyIDLabel = new javax.swing.JLabel();
        sigPropsKeyIDField = new javax.swing.JTextField();
        sigPropsUserNameLabel = new javax.swing.JLabel();
        sigPropsUserNameField = new javax.swing.JTextField();
        sigPropsUserEmailLabel = new javax.swing.JLabel();
        sigPropsUserEmailField = new javax.swing.JTextField();
        sigPropsSigTrustLabel = new javax.swing.JLabel();
        sigPropsSigTrustField = new javax.swing.JTextField();
        sigPropsCreDateLabel = new javax.swing.JLabel();
        sigPropsCreDateField = new javax.swing.JTextField();
        sigPropsExpDateLabel = new javax.swing.JLabel();
        sigPropsExpDateField = new javax.swing.JTextField();
        sigPropsExportableLabel = new javax.swing.JLabel();
        sigPropsExportableField = new javax.swing.JTextField();
        sigPropsTrustTypeLabel = new javax.swing.JLabel();
        sigPropsTrustTypeField = new javax.swing.JTextField();
        jPanel32 = new javax.swing.JPanel();
        sigPropsOKButton = new javax.swing.JButton();
        subkeyPropsDialog = new javax.swing.JDialog();
        jPanel34 = new javax.swing.JPanel();
        subkeyPropsMessageLabel = new javax.swing.JLabel();
        jPanel37 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        subkeyPropsAlgorithmLabel = new javax.swing.JLabel();
        subkeyPropsAlgorithmField = new javax.swing.JTextField();
        subkeyPropsKeySizeLabel = new javax.swing.JLabel();
        subkeyPropsKeySizeField = new javax.swing.JTextField();
        subkeyPropsKeyIDLabel = new javax.swing.JLabel();
        subkeyPropsKeyIDField = new javax.swing.JTextField();
        subkeyPropsCreDateLabel = new javax.swing.JLabel();
        subkeyPropsCreDateField = new javax.swing.JTextField();
        subkeyPropsExpDateLabel = new javax.swing.JLabel();
        subkeyPropsExpDateField = new javax.swing.JTextField();
        jPanel36 = new javax.swing.JPanel();
        subkeyPropsFingerprintField = new javax.swing.JTextField();
        jPanel35 = new javax.swing.JPanel();
        subkeyPropsOKButton = new javax.swing.JButton();
        keyPropsDialog = new javax.swing.JDialog();
        jPanel42 = new javax.swing.JPanel();
        keyPropsAlgorithmLabel = new javax.swing.JLabel();
        keyPropsAlgorithmField = new javax.swing.JTextField();
        keyPropsKeySizeLabel = new javax.swing.JLabel();
        keyPropsKeySizeField = new javax.swing.JTextField();
        keyPropsKeyIDLabel = new javax.swing.JLabel();
        keyPropsKeyIDField = new javax.swing.JTextField();
        keyPropsOwnerTrustLabel = new javax.swing.JLabel();
        keyPropsOwnerTrustComboBox = new javax.swing.JComboBox();
        keyPropsCreDateLabel = new javax.swing.JLabel();
        keyPropsCreDateField = new javax.swing.JTextField();
        keyPropsExpDateLabel = new javax.swing.JLabel();
        keyPropsExpDateField = new javax.swing.JTextField();
        keyPropsKeyStatusLabel = new javax.swing.JLabel();
        keyPropsKeyStatusField = new javax.swing.JTextField();
        jPanel38 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        keyPropsFingerprintField = new javax.swing.JTextField();
        jPanel43 = new javax.swing.JPanel();
        keyPropsCipherPrefs1 = new javax.swing.JCheckBox();
        keyPropsCipherPrefs2 = new javax.swing.JCheckBox();
        keyPropsCipherPrefs3 = new javax.swing.JCheckBox();
        keyPropsCipherPrefs4 = new javax.swing.JCheckBox();
        keyPropsCipherPrefs7 = new javax.swing.JCheckBox();
        keyPropsCipherPrefs8 = new javax.swing.JCheckBox();
        keyPropsCipherPrefs9 = new javax.swing.JCheckBox();
        keyPropsCipherPrefs10 = new javax.swing.JCheckBox();
        jPanel44 = new javax.swing.JPanel();
        keyPropsHashPrefs1 = new javax.swing.JCheckBox();
        keyPropsHashPrefs2 = new javax.swing.JCheckBox();
        keyPropsHashPrefs3 = new javax.swing.JCheckBox();
        keyPropsHashPrefs8 = new javax.swing.JCheckBox();
        keyPropsHashPrefs9 = new javax.swing.JCheckBox();
        keyPropsHashPrefs10 = new javax.swing.JCheckBox();
        keyPropsHashPrefs11 = new javax.swing.JCheckBox();
        jPanel45 = new javax.swing.JPanel();
        keyPropsCompressPrefs0 = new javax.swing.JCheckBox();
        keyPropsCompressPrefs1 = new javax.swing.JCheckBox();
        keyPropsCompressPrefs2 = new javax.swing.JCheckBox();
        keyPropsCompressPrefs3 = new javax.swing.JCheckBox();
        jPanel40 = new javax.swing.JPanel();
        keyPropsOKButton = new javax.swing.JButton();
        addUserBindingDialog = new javax.swing.JDialog();
        jPanel39 = new javax.swing.JPanel();
        addEmailLabel = new javax.swing.JLabel();
        addEmailTextField = new javax.swing.JTextField();
        jPanel46 = new javax.swing.JPanel();
        addNameLabel = new javax.swing.JLabel();
        addNameTextField = new javax.swing.JTextField();
        jPanel47 = new javax.swing.JPanel();
        addUserBindingOKButton = new javax.swing.JButton();
        addUserBindingCancelButton = new javax.swing.JButton();
        chooseSigningKeyDialog = new javax.swing.JDialog();
        jPanel48 = new javax.swing.JPanel();
        jPanel68 = new javax.swing.JPanel();
        trustDepthLabel = new javax.swing.JLabel();
        trustDepthComboBox = new javax.swing.JComboBox();
        trustAmountLabel = new javax.swing.JLabel();
        trustAmountComboBox = new javax.swing.JComboBox();
        jPanel69 = new javax.swing.JPanel();
        sigIsExportableCheckBox = new javax.swing.JCheckBox();
        jPanel70 = new javax.swing.JPanel();
        trustedIntroducerCheckbox = new javax.swing.JCheckBox();
        jPanel49 = new javax.swing.JPanel();
        signingKeyComboBox = new javax.swing.JComboBox();
        jPanel50 = new javax.swing.JPanel();
        chooseSigningKeyOKButton = new javax.swing.JButton();
        chooseSigningKeyCancelButton = new javax.swing.JButton();
        generateKeypairDialog = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        generateKeyPairOKButton = new javax.swing.JButton();
        generateKeyPairCancelButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        primaryKeyAlgorithmLabel = new javax.swing.JLabel();
        primaryKeyAlgorithmComboBox = new javax.swing.JComboBox();
        primaryKeySizeLabel = new javax.swing.JLabel();
        primaryKeySizeComboBox = new javax.swing.JComboBox();
        jPanel14 = new javax.swing.JPanel();
        subkeyAlgorithmLabel = new javax.swing.JLabel();
        subkeyAlgorithmComboBox = new javax.swing.JComboBox();
        subkeySizeLabel = new javax.swing.JLabel();
        subkeySizeComboBox = new javax.swing.JComboBox();
        jPanel65 = new javax.swing.JPanel();
        jPanel66 = new javax.swing.JPanel();
        genKeyCipherPrefs_IDEA = new javax.swing.JCheckBox();
        genKeyCipherPrefs_TRIPLEDES = new javax.swing.JCheckBox();
        genKeyCipherPrefs_CAST5 = new javax.swing.JCheckBox();
        genKeyCipherPrefs_BLOWFISH = new javax.swing.JCheckBox();
        genKeyCipherPrefs_AES128 = new javax.swing.JCheckBox();
        genKeyCipherPrefs_AES192 = new javax.swing.JCheckBox();
        genKeyCipherPrefs_AES256 = new javax.swing.JCheckBox();
        genKeyCipherPrefs_TWOFISH = new javax.swing.JCheckBox();
        jPanel67 = new javax.swing.JPanel();
        defaultSymAlgLabel = new javax.swing.JLabel();
        defaultSymAlgComboBox = new javax.swing.JComboBox();
        jPanel17 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel16 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        generateSubkeyDialog = new javax.swing.JDialog();
        jPanel56 = new javax.swing.JPanel();
        jPanel57 = new javax.swing.JPanel();
        genSubkeyOKButton = new javax.swing.JButton();
        genSubkeyCancelButton = new javax.swing.JButton();
        jPanel58 = new javax.swing.JPanel();
        jPanel61 = new javax.swing.JPanel();
        genSubkeyAlgorithmLabel = new javax.swing.JLabel();
        genSubkeyAlgorithmComboBox = new javax.swing.JComboBox();
        genSubkeySizeLabel = new javax.swing.JLabel();
        genSubkeySizeComboBox = new javax.swing.JComboBox();
        jPanel64 = new javax.swing.JPanel();
        jPanel62 = new javax.swing.JPanel();
        genSubkeyPassphraseLabel1 = new javax.swing.JLabel();
        genSubkeyPassphraseField1 = new javax.swing.JPasswordField();
        jPanel63 = new javax.swing.JPanel();
        genSubkeyPassphraseLabel2 = new javax.swing.JLabel();
        genSubkeyPassphraseField2 = new javax.swing.JPasswordField();
        resultsKeyPopupMenu = new javax.swing.JPopupMenu();
        resultsAddToKeyringItem = new javax.swing.JMenuItem();
        jSeparator12 = new javax.swing.JSeparator();
        resultsKeyPropsItem = new javax.swing.JMenuItem();
        resultsSubkeyPopupMenu = new javax.swing.JPopupMenu();
        resultsSubkeyPropsItem = new javax.swing.JMenuItem();
        resultsSigPopupMenu = new javax.swing.JPopupMenu();
        resultsSigPropsItem = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        keyringTree = new javax.swing.JTree();
        jPanel26 = new javax.swing.JPanel();
        privateKeysOnlyCheckBox = new javax.swing.JCheckBox();
        jPanel24 = new javax.swing.JPanel();
        generateNewKeypairButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        secretKeySourcesList = new javax.swing.JList();
        jPanel25 = new javax.swing.JPanel();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        publicKeySourcesList = new javax.swing.JList();
        jPanel27 = new javax.swing.JPanel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jPanel28 = new javax.swing.JPanel();
        jPanel52 = new javax.swing.JPanel();
        jPanel59 = new javax.swing.JPanel();
        keySearchByLabel = new javax.swing.JLabel();
        keySearchByComboBox = new javax.swing.JComboBox();
        jPanel55 = new javax.swing.JPanel();
        jPanel53 = new javax.swing.JPanel();
        keySearchButton = new javax.swing.JButton();
        jPanel54 = new javax.swing.JPanel();
        keySearchInLabel = new javax.swing.JLabel();
        keySearchComboBox = new javax.swing.JComboBox();
        jPanel60 = new javax.swing.JPanel();
        keyIDCriteriaPanel = new javax.swing.JPanel();
        keySearchKeyIDLabel = new javax.swing.JLabel();
        keySearchKeyIDField = new javax.swing.JTextField();
        keySearchFreeTextLabel = new javax.swing.JLabel();
        keySearchFreeTextField = new javax.swing.JTextField();
        emailCriteriaPanel = new javax.swing.JPanel();
        keySearchNameLabel = new javax.swing.JLabel();
        keySearchNameField = new javax.swing.JTextField();
        keySearchEmailLabel = new javax.swing.JLabel();
        keySearchEmailField = new javax.swing.JTextField();
        jPanel51 = new javax.swing.JPanel();
        keySearchResultsLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        resultsTree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        deleteKeyItem.setText("Delete");
        deleteKeyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteKeyItemActionPerformed(evt);
            }
        });

        keyPopupMenu.add(deleteKeyItem);

        keyPopupMenu.add(jSeparator4);

        revokePrimarySigningKeyItem.setText("Revoke...");
        revokePrimarySigningKeyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revokePrimarySigningKeyItemActionPerformed(evt);
            }
        });

        keyPopupMenu.add(revokePrimarySigningKeyItem);

        keyPopupMenu.add(jSeparator8);

        publicKeyExportMenu.setText("Export Public Key to");
        exportPublicKeyToAscFileItem.setText("Ascii File...");
        exportPublicKeyToAscFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPublicKeyToAscFileItemActionPerformed(evt);
            }
        });

        publicKeyExportMenu.add(exportPublicKeyToAscFileItem);

        exportPublicKeyToBinFileItem.setText("Binary File...");
        exportPublicKeyToBinFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPublicKeyToBinFileItemActionPerformed(evt);
            }
        });

        publicKeyExportMenu.add(exportPublicKeyToBinFileItem);

        publicKeyExportMenu.add(jSeparator5);

        exportPublicKeyToKeyServerItem.setText("Key Server...");
        exportPublicKeyToKeyServerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPublicKeyToKeyServerItemActionPerformed(evt);
            }
        });

        publicKeyExportMenu.add(exportPublicKeyToKeyServerItem);

        keyPopupMenu.add(publicKeyExportMenu);

        privateKeyExportMenu.setText("Export Private Key to");
        exportPrivateKeyToAscFileItem.setText("Ascii File...");
        exportPrivateKeyToAscFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPrivateKeyToAscFileItemActionPerformed(evt);
            }
        });

        privateKeyExportMenu.add(exportPrivateKeyToAscFileItem);

        exportPrivateKeyToBinFileItem.setText("Binary File...");
        exportPrivateKeyToBinFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPrivateKeyToBinFileItemActionPerformed(evt);
            }
        });

        privateKeyExportMenu.add(exportPrivateKeyToBinFileItem);

        keyPopupMenu.add(privateKeyExportMenu);

        keyPopupMenu.add(jSeparator1);

        addEmailAddressItem.setText("Add Email Address...");
        addEmailAddressItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmailAddressItemActionPerformed(evt);
            }
        });

        keyPopupMenu.add(addEmailAddressItem);

        addSubkeyItem.setText("Add Subkey...");
        addSubkeyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubkeyItemActionPerformed(evt);
            }
        });

        keyPopupMenu.add(addSubkeyItem);

        keyPopupMenu.add(jSeparator10);

        keyPropsItem.setText("Properties");
        keyPropsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPropsItemActionPerformed(evt);
            }
        });

        keyPopupMenu.add(keyPropsItem);

        deleteSubkeyItem.setText("Delete");
        deleteSubkeyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSubkeyItemActionPerformed(evt);
            }
        });

        subkeyPopupMenu.add(deleteSubkeyItem);

        subkeyPopupMenu.add(jSeparator9);

        revokeSubkeyItem.setText("Revoke...");
        revokeSubkeyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revokeSubkeyItemActionPerformed(evt);
            }
        });

        subkeyPopupMenu.add(revokeSubkeyItem);

        subkeyPopupMenu.add(jSeparator6);

        subkeyPropsItem.setText("Properties");
        subkeyPropsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subkeyPropsItemActionPerformed(evt);
            }
        });

        subkeyPopupMenu.add(subkeyPropsItem);

        deleteUserItem.setText("Delete");
        deleteUserItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserItemActionPerformed(evt);
            }
        });

        userPopupMenu.add(deleteUserItem);

        userPopupMenu.add(jSeparator2);

        signUserBindingItem.setText("Sign...");
        signUserBindingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUserBindingItemActionPerformed(evt);
            }
        });

        userPopupMenu.add(signUserBindingItem);

        deleteSigItem.setText("Delete");
        deleteSigItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSigItemActionPerformed(evt);
            }
        });

        sigPopupMenu.add(deleteSigItem);

        sigPopupMenu.add(jSeparator3);

        revokeSigItem.setText("Revoke...");
        revokeSigItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revokeSigItemActionPerformed(evt);
            }
        });

        sigPopupMenu.add(revokeSigItem);

        sigPopupMenu.add(jSeparator7);

        sigPropsItem.setText("Properties");
        sigPropsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sigPropsItemActionPerformed(evt);
            }
        });

        sigPopupMenu.add(sigPropsItem);

        createNewKeyMenuItem.setText("Generate New Keypair...");
        createNewKeyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewKeyMenuItemActionPerformed(evt);
            }
        });

        keyringPopupMenu.add(createNewKeyMenuItem);

        keyringPopupMenu.add(jSeparator11);

        publicKeyringExportMenu.setText("Export Public Keyring to");
        exportPublicKeyringToAscFileItem.setText("Ascii File...");
        exportPublicKeyringToAscFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPublicKeyringToAscFileItemActionPerformed(evt);
            }
        });

        publicKeyringExportMenu.add(exportPublicKeyringToAscFileItem);

        exportPublicKeyringToBinFileItem.setText("Binary File...");
        exportPublicKeyringToBinFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPublicKeyringToBinFileItemActionPerformed(evt);
            }
        });

        publicKeyringExportMenu.add(exportPublicKeyringToBinFileItem);

        keyringPopupMenu.add(publicKeyringExportMenu);

        privateKeyringExportMenu.setText("Export Private Keyring to");
        exportPrivateKeyringToAscFileItem.setText("Ascii File...");
        exportPrivateKeyringToAscFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPrivateKeyringToAscFileItemActionPerformed(evt);
            }
        });

        privateKeyringExportMenu.add(exportPrivateKeyringToAscFileItem);

        exportPrivateKeyringToBinFileItem.setText("BinaryFile...");
        exportPrivateKeyringToBinFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPrivateKeyringToBinFileItemActionPerformed(evt);
            }
        });

        privateKeyringExportMenu.add(exportPrivateKeyringToBinFileItem);

        keyringPopupMenu.add(privateKeyringExportMenu);

        sigPropsDialog.setTitle("Signature Properties");
        sigPropsDialog.getAccessibleContext().setAccessibleParent(this);
        jPanel31.setLayout(new java.awt.BorderLayout());

        sigPropsMessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sigPropsMessageLabel.setText("Signature state message goes here");
        sigPropsMessageLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("State"));
        sigPropsMessageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel31.add(sigPropsMessageLabel, java.awt.BorderLayout.CENTER);

        sigPropsDialog.getContentPane().add(jPanel31, java.awt.BorderLayout.NORTH);

        jPanel30.setLayout(new java.awt.GridLayout(8, 2, 3, 4));

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder("Properties"));
        sigPropsKeyIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sigPropsKeyIDLabel.setText("Signing Key ID: ");
        jPanel30.add(sigPropsKeyIDLabel);

        sigPropsKeyIDField.setEditable(false);
        jPanel30.add(sigPropsKeyIDField);

        sigPropsUserNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sigPropsUserNameLabel.setText("Signing User Name: ");
        jPanel30.add(sigPropsUserNameLabel);

        sigPropsUserNameField.setEditable(false);
        jPanel30.add(sigPropsUserNameField);

        sigPropsUserEmailLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sigPropsUserEmailLabel.setText("Signing User Email: ");
        jPanel30.add(sigPropsUserEmailLabel);

        sigPropsUserEmailField.setEditable(false);
        jPanel30.add(sigPropsUserEmailField);

        sigPropsSigTrustLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sigPropsSigTrustLabel.setText("Signing User Trust: ");
        jPanel30.add(sigPropsSigTrustLabel);

        sigPropsSigTrustField.setEditable(false);
        jPanel30.add(sigPropsSigTrustField);

        sigPropsCreDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sigPropsCreDateLabel.setText("Signature Creation Date: ");
        jPanel30.add(sigPropsCreDateLabel);

        sigPropsCreDateField.setEditable(false);
        jPanel30.add(sigPropsCreDateField);

        sigPropsExpDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sigPropsExpDateLabel.setText("Signature Expiry Date: ");
        jPanel30.add(sigPropsExpDateLabel);

        sigPropsExpDateField.setEditable(false);
        jPanel30.add(sigPropsExpDateField);

        sigPropsExportableLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sigPropsExportableLabel.setText("Signature is Exportable?: ");
        jPanel30.add(sigPropsExportableLabel);

        sigPropsExportableField.setEditable(false);
        jPanel30.add(sigPropsExportableField);

        sigPropsTrustTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sigPropsTrustTypeLabel.setText("Signature Trust Depth: ");
        jPanel30.add(sigPropsTrustTypeLabel);

        sigPropsTrustTypeField.setEditable(false);
        jPanel30.add(sigPropsTrustTypeField);

        sigPropsDialog.getContentPane().add(jPanel30, java.awt.BorderLayout.CENTER);

        sigPropsOKButton.setText("OK");
        sigPropsOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sigPropsOKButtonActionPerformed(evt);
            }
        });

        jPanel32.add(sigPropsOKButton);

        sigPropsDialog.getContentPane().add(jPanel32, java.awt.BorderLayout.SOUTH);

        subkeyPropsDialog.setTitle("Subkey Properties");
        jPanel34.setLayout(new java.awt.BorderLayout());

        jPanel34.setBorder(javax.swing.BorderFactory.createTitledBorder("Subkey State"));
        subkeyPropsMessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subkeyPropsMessageLabel.setText("Subkey state message goes here");
        jPanel34.add(subkeyPropsMessageLabel, java.awt.BorderLayout.CENTER);

        subkeyPropsDialog.getContentPane().add(jPanel34, java.awt.BorderLayout.NORTH);

        jPanel37.setLayout(new java.awt.BorderLayout());

        jPanel33.setLayout(new java.awt.GridLayout(5, 2, 3, 4));

        jPanel33.setBorder(javax.swing.BorderFactory.createTitledBorder("Subkey Properties"));
        subkeyPropsAlgorithmLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subkeyPropsAlgorithmLabel.setText("Subkey Type: ");
        jPanel33.add(subkeyPropsAlgorithmLabel);

        subkeyPropsAlgorithmField.setEditable(false);
        jPanel33.add(subkeyPropsAlgorithmField);

        subkeyPropsKeySizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subkeyPropsKeySizeLabel.setText("Subkey Size: ");
        jPanel33.add(subkeyPropsKeySizeLabel);

        subkeyPropsKeySizeField.setEditable(false);
        jPanel33.add(subkeyPropsKeySizeField);

        subkeyPropsKeyIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subkeyPropsKeyIDLabel.setText("Subkey ID: ");
        jPanel33.add(subkeyPropsKeyIDLabel);

        subkeyPropsKeyIDField.setEditable(false);
        jPanel33.add(subkeyPropsKeyIDField);

        subkeyPropsCreDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subkeyPropsCreDateLabel.setText("Subkey Creation Date: ");
        jPanel33.add(subkeyPropsCreDateLabel);

        subkeyPropsCreDateField.setEditable(false);
        jPanel33.add(subkeyPropsCreDateField);

        subkeyPropsExpDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subkeyPropsExpDateLabel.setText("Subkey Expiry Date: ");
        jPanel33.add(subkeyPropsExpDateLabel);

        subkeyPropsExpDateField.setEditable(false);
        jPanel33.add(subkeyPropsExpDateField);

        jPanel37.add(jPanel33, java.awt.BorderLayout.CENTER);

        jPanel36.setBorder(javax.swing.BorderFactory.createTitledBorder("Subkey Fingerprint"));
        subkeyPropsFingerprintField.setEditable(false);
        subkeyPropsFingerprintField.setText("XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX ");
        jPanel36.add(subkeyPropsFingerprintField);

        jPanel37.add(jPanel36, java.awt.BorderLayout.NORTH);

        subkeyPropsDialog.getContentPane().add(jPanel37, java.awt.BorderLayout.CENTER);

        subkeyPropsOKButton.setText("OK");
        subkeyPropsOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subkeyPropsOKButtonActionPerformed(evt);
            }
        });

        jPanel35.add(subkeyPropsOKButton);

        subkeyPropsDialog.getContentPane().add(jPanel35, java.awt.BorderLayout.SOUTH);

        keyPropsDialog.setTitle("Signing Key Properties");
        jPanel42.setLayout(new java.awt.GridLayout(7, 2, 3, 4));

        jPanel42.setBorder(javax.swing.BorderFactory.createTitledBorder("Key Properties"));
        keyPropsAlgorithmLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keyPropsAlgorithmLabel.setText("Key Type: ");
        jPanel42.add(keyPropsAlgorithmLabel);

        keyPropsAlgorithmField.setEditable(false);
        jPanel42.add(keyPropsAlgorithmField);

        keyPropsKeySizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keyPropsKeySizeLabel.setText("Key Size: ");
        jPanel42.add(keyPropsKeySizeLabel);

        keyPropsKeySizeField.setEditable(false);
        jPanel42.add(keyPropsKeySizeField);

        keyPropsKeyIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keyPropsKeyIDLabel.setText("Key ID: ");
        jPanel42.add(keyPropsKeyIDLabel);

        keyPropsKeyIDField.setEditable(false);
        jPanel42.add(keyPropsKeyIDField);

        keyPropsOwnerTrustLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keyPropsOwnerTrustLabel.setText("Owner Trust: ");
        jPanel42.add(keyPropsOwnerTrustLabel);

        jPanel42.add(keyPropsOwnerTrustComboBox);

        keyPropsCreDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keyPropsCreDateLabel.setText("Key Creation Date: ");
        jPanel42.add(keyPropsCreDateLabel);

        keyPropsCreDateField.setEditable(false);
        jPanel42.add(keyPropsCreDateField);

        keyPropsExpDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keyPropsExpDateLabel.setText("Key Expiry Date: ");
        jPanel42.add(keyPropsExpDateLabel);

        keyPropsExpDateField.setEditable(false);
        jPanel42.add(keyPropsExpDateField);

        keyPropsKeyStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keyPropsKeyStatusLabel.setText("Key Status: ");
        jPanel42.add(keyPropsKeyStatusLabel);

        keyPropsKeyStatusField.setEditable(false);
        keyPropsKeyStatusField.setFont(new java.awt.Font("Arial", 1, 12));
        jPanel42.add(keyPropsKeyStatusField);

        keyPropsDialog.getContentPane().add(jPanel42, java.awt.BorderLayout.NORTH);

        jPanel38.setLayout(new java.awt.GridLayout(4, 0));

        jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder("Signing Key Fingerprint"));
        keyPropsFingerprintField.setEditable(false);
        keyPropsFingerprintField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keyPropsFingerprintField.setText("XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX");
        jPanel41.add(keyPropsFingerprintField);

        jPanel38.add(jPanel41);

        jPanel43.setLayout(new java.awt.GridLayout(2, 4, 3, 4));

        jPanel43.setBorder(javax.swing.BorderFactory.createTitledBorder("Symmetric Cipher Preferences"));
        keyPropsCipherPrefs1.setText("IDEA");
        keyPropsCipherPrefs1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCipherPrefs1.setEnabled(false);
        keyPropsCipherPrefs1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel43.add(keyPropsCipherPrefs1);

        keyPropsCipherPrefs2.setText("3DES");
        keyPropsCipherPrefs2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCipherPrefs2.setEnabled(false);
        keyPropsCipherPrefs2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel43.add(keyPropsCipherPrefs2);

        keyPropsCipherPrefs3.setText("CAST5");
        keyPropsCipherPrefs3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCipherPrefs3.setEnabled(false);
        keyPropsCipherPrefs3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel43.add(keyPropsCipherPrefs3);

        keyPropsCipherPrefs4.setText("Blowfish");
        keyPropsCipherPrefs4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCipherPrefs4.setEnabled(false);
        keyPropsCipherPrefs4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel43.add(keyPropsCipherPrefs4);

        keyPropsCipherPrefs7.setText("AES-128");
        keyPropsCipherPrefs7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCipherPrefs7.setEnabled(false);
        keyPropsCipherPrefs7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel43.add(keyPropsCipherPrefs7);

        keyPropsCipherPrefs8.setText("AES-192");
        keyPropsCipherPrefs8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCipherPrefs8.setEnabled(false);
        keyPropsCipherPrefs8.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel43.add(keyPropsCipherPrefs8);

        keyPropsCipherPrefs9.setText("AES-256");
        keyPropsCipherPrefs9.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCipherPrefs9.setEnabled(false);
        keyPropsCipherPrefs9.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel43.add(keyPropsCipherPrefs9);

        keyPropsCipherPrefs10.setText("Twofish");
        keyPropsCipherPrefs10.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCipherPrefs10.setEnabled(false);
        keyPropsCipherPrefs10.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel43.add(keyPropsCipherPrefs10);

        jPanel38.add(jPanel43);

        jPanel44.setLayout(new java.awt.GridLayout(2, 4, 3, 4));

        jPanel44.setBorder(javax.swing.BorderFactory.createTitledBorder("Hash Algorithm Preferences"));
        keyPropsHashPrefs1.setText("MD5");
        keyPropsHashPrefs1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsHashPrefs1.setEnabled(false);
        keyPropsHashPrefs1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel44.add(keyPropsHashPrefs1);

        keyPropsHashPrefs2.setText("SHA-1");
        keyPropsHashPrefs2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsHashPrefs2.setEnabled(false);
        keyPropsHashPrefs2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel44.add(keyPropsHashPrefs2);

        keyPropsHashPrefs3.setText("RIPE-MD/160");
        keyPropsHashPrefs3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsHashPrefs3.setEnabled(false);
        keyPropsHashPrefs3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel44.add(keyPropsHashPrefs3);

        keyPropsHashPrefs8.setText("SHA-256");
        keyPropsHashPrefs8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsHashPrefs8.setEnabled(false);
        keyPropsHashPrefs8.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel44.add(keyPropsHashPrefs8);

        keyPropsHashPrefs9.setText("SHA-384");
        keyPropsHashPrefs9.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsHashPrefs9.setEnabled(false);
        keyPropsHashPrefs9.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel44.add(keyPropsHashPrefs9);

        keyPropsHashPrefs10.setText("SHA-512");
        keyPropsHashPrefs10.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsHashPrefs10.setEnabled(false);
        keyPropsHashPrefs10.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel44.add(keyPropsHashPrefs10);

        keyPropsHashPrefs11.setText("SHA-224");
        keyPropsHashPrefs11.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsHashPrefs11.setEnabled(false);
        keyPropsHashPrefs11.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel44.add(keyPropsHashPrefs11);

        jPanel38.add(jPanel44);

        jPanel45.setLayout(new java.awt.GridLayout(1, 4, 3, 4));

        jPanel45.setBorder(javax.swing.BorderFactory.createTitledBorder("Compression Algorithm Preferences"));
        keyPropsCompressPrefs0.setText("None");
        keyPropsCompressPrefs0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCompressPrefs0.setEnabled(false);
        keyPropsCompressPrefs0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel45.add(keyPropsCompressPrefs0);

        keyPropsCompressPrefs1.setText("Zip");
        keyPropsCompressPrefs1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCompressPrefs1.setEnabled(false);
        keyPropsCompressPrefs1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel45.add(keyPropsCompressPrefs1);

        keyPropsCompressPrefs2.setText("ZLib");
        keyPropsCompressPrefs2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCompressPrefs2.setEnabled(false);
        keyPropsCompressPrefs2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel45.add(keyPropsCompressPrefs2);

        keyPropsCompressPrefs3.setText("BZip2");
        keyPropsCompressPrefs3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keyPropsCompressPrefs3.setEnabled(false);
        keyPropsCompressPrefs3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel45.add(keyPropsCompressPrefs3);

        jPanel38.add(jPanel45);

        keyPropsDialog.getContentPane().add(jPanel38, java.awt.BorderLayout.CENTER);

        keyPropsOKButton.setText("OK");
        keyPropsOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPropsOKButtonActionPerformed(evt);
            }
        });

        jPanel40.add(keyPropsOKButton);

        keyPropsDialog.getContentPane().add(jPanel40, java.awt.BorderLayout.SOUTH);

        addUserBindingDialog.setTitle("Add Email Address");
        addEmailLabel.setText("Email Address: ");
        jPanel39.add(addEmailLabel);

        addEmailTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        jPanel39.add(addEmailTextField);

        addUserBindingDialog.getContentPane().add(jPanel39, java.awt.BorderLayout.CENTER);

        addNameLabel.setText("    Email Name: ");
        jPanel46.add(addNameLabel);

        addNameTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        jPanel46.add(addNameTextField);

        addUserBindingDialog.getContentPane().add(jPanel46, java.awt.BorderLayout.NORTH);

        addUserBindingOKButton.setText("OK");
        addUserBindingOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserBindingOKButtonActionPerformed(evt);
            }
        });

        jPanel47.add(addUserBindingOKButton);

        addUserBindingCancelButton.setText("Cancel");
        addUserBindingCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserBindingCancelButtonActionPerformed(evt);
            }
        });

        jPanel47.add(addUserBindingCancelButton);

        addUserBindingDialog.getContentPane().add(jPanel47, java.awt.BorderLayout.SOUTH);

        chooseSigningKeyDialog.setTitle("Choose Signing Key");
        jPanel48.setLayout(new java.awt.BorderLayout());

        trustDepthLabel.setText("Trust Depth");
        trustDepthLabel.setEnabled(false);
        jPanel68.add(trustDepthLabel);

        trustDepthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal Signature", "Trusted Introducer", "Meta-Introducer" }));
        trustDepthComboBox.setEnabled(false);
        jPanel68.add(trustDepthComboBox);

        trustAmountLabel.setText("   Trust Amount");
        trustAmountLabel.setEnabled(false);
        jPanel68.add(trustAmountLabel);

        trustAmountComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Partial Trust", "Complete Trust" }));
        trustAmountComboBox.setEnabled(false);
        jPanel68.add(trustAmountComboBox);

        jPanel48.add(jPanel68, java.awt.BorderLayout.SOUTH);

        sigIsExportableCheckBox.setText("Exportable signature");
        sigIsExportableCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        sigIsExportableCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jPanel69.add(sigIsExportableCheckBox);

        jPanel48.add(jPanel69, java.awt.BorderLayout.NORTH);

        trustedIntroducerCheckbox.setText("Trust signature");
        trustedIntroducerCheckbox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        trustedIntroducerCheckbox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        trustedIntroducerCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trustedIntroducerCheckboxActionPerformed(evt);
            }
        });

        jPanel70.add(trustedIntroducerCheckbox);

        jPanel48.add(jPanel70, java.awt.BorderLayout.CENTER);

        chooseSigningKeyDialog.getContentPane().add(jPanel48, java.awt.BorderLayout.CENTER);

        jPanel49.setBorder(javax.swing.BorderFactory.createTitledBorder("Which signing key do you want to use?"));
        jPanel49.add(signingKeyComboBox);

        chooseSigningKeyDialog.getContentPane().add(jPanel49, java.awt.BorderLayout.NORTH);

        chooseSigningKeyOKButton.setText("OK");
        chooseSigningKeyOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSigningKeyOKButtonActionPerformed(evt);
            }
        });

        jPanel50.add(chooseSigningKeyOKButton);

        chooseSigningKeyCancelButton.setText("Cancel");
        chooseSigningKeyCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSigningKeyCancelButtonActionPerformed(evt);
            }
        });

        jPanel50.add(chooseSigningKeyCancelButton);

        chooseSigningKeyDialog.getContentPane().add(jPanel50, java.awt.BorderLayout.SOUTH);

        generateKeypairDialog.setTitle("Create New Key");
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate New Keypair"));
        jPanel5.setMinimumSize(new java.awt.Dimension(490, 360));
        jPanel5.setPreferredSize(new java.awt.Dimension(560, 360));
        generateKeyPairOKButton.setMnemonic('g');
        generateKeyPairOKButton.setText("Generate Key...");
        generateKeyPairOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeyPairOKButtonActionPerformed(evt);
            }
        });

        jPanel10.add(generateKeyPairOKButton);

        generateKeyPairCancelButton.setText("Cancel");
        generateKeyPairCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeyPairCancelButtonActionPerformed(evt);
            }
        });

        jPanel10.add(generateKeyPairCancelButton);

        jPanel5.add(jPanel10, java.awt.BorderLayout.SOUTH);

        jPanel11.setMinimumSize(new java.awt.Dimension(510, 190));
        jPanel11.setPreferredSize(new java.awt.Dimension(500, 200));
        jLabel3.setText("Name");
        jPanel12.add(jLabel3);

        jTextField3.setPreferredSize(new java.awt.Dimension(123, 19));
        jPanel12.add(jTextField3);

        jLabel4.setText("Email Address");
        jPanel12.add(jLabel4);

        jTextField4.setPreferredSize(new java.awt.Dimension(210, 19));
        jPanel12.add(jTextField4);

        jPanel11.add(jPanel12);

        primaryKeyAlgorithmLabel.setText("Signing/Authenticating Key Algorithm");
        jPanel13.add(primaryKeyAlgorithmLabel);

        primaryKeyAlgorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(populateComboBox("openpgp.signaturealgorithm.available","RSA,DSA")));
        primaryKeyAlgorithmComboBox.setSelectedItem(configurationData.getSetting("keymanager.openpgp.keygen.default.signing","RSA"));
        primaryKeyAlgorithmComboBox.setPreferredSize(new java.awt.Dimension(150, 25));
        primaryKeyAlgorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primaryKeyAlgorithmComboBoxActionPerformed(evt);
            }
        });

        jPanel13.add(primaryKeyAlgorithmComboBox);

        primaryKeySizeLabel.setText("  Size: ");
        jPanel13.add(primaryKeySizeLabel);

        primaryKeySizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1024 bits", "2048 bits", "4096 bits" }));
        jPanel13.add(primaryKeySizeComboBox);

        jPanel11.add(jPanel13);

        subkeyAlgorithmLabel.setText("Encrypting/Decrypting Key Algorithm");
        jPanel14.add(subkeyAlgorithmLabel);

        subkeyAlgorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(populateComboBox("openpgp.pkalgorithm.available","RSA")));
        subkeyAlgorithmComboBox.setSelectedItem(configurationData.getSetting("keymanager.openpgp.keygen.default.pk","RSA"));
        subkeyAlgorithmComboBox.setPreferredSize(new java.awt.Dimension(150, 25));
        jPanel14.add(subkeyAlgorithmComboBox);

        subkeySizeLabel.setText("  Size: ");
        jPanel14.add(subkeySizeLabel);

        subkeySizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1024 bits", "2048 bits", "4096 bits" }));
        jPanel14.add(subkeySizeComboBox);

        jPanel11.add(jPanel14);

        jPanel65.setBorder(javax.swing.BorderFactory.createTitledBorder("Symmetric Cipher Preferences"));
        jPanel66.setLayout(new java.awt.GridLayout(2, 4, 3, 4));

        genKeyCipherPrefs_IDEA.setSelected(true);
        genKeyCipherPrefs_IDEA.setText("IDEA");
        genKeyCipherPrefs_IDEA.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        genKeyCipherPrefs_IDEA.setMargin(new java.awt.Insets(0, 0, 0, 0));
        genKeyCipherPrefs_IDEA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyCipherPrefs_IDEAActionPerformed(evt);
            }
        });

        jPanel66.add(genKeyCipherPrefs_IDEA);

        genKeyCipherPrefs_TRIPLEDES.setSelected(true);
        genKeyCipherPrefs_TRIPLEDES.setText("3DES");
        genKeyCipherPrefs_TRIPLEDES.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        genKeyCipherPrefs_TRIPLEDES.setMargin(new java.awt.Insets(0, 0, 0, 0));
        genKeyCipherPrefs_TRIPLEDES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyCipherPrefs_TRIPLEDESActionPerformed(evt);
            }
        });

        jPanel66.add(genKeyCipherPrefs_TRIPLEDES);

        genKeyCipherPrefs_CAST5.setSelected(true);
        genKeyCipherPrefs_CAST5.setText("CAST5");
        genKeyCipherPrefs_CAST5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        genKeyCipherPrefs_CAST5.setMargin(new java.awt.Insets(0, 0, 0, 0));
        genKeyCipherPrefs_CAST5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyCipherPrefs_CAST5ActionPerformed(evt);
            }
        });

        jPanel66.add(genKeyCipherPrefs_CAST5);

        genKeyCipherPrefs_BLOWFISH.setSelected(true);
        genKeyCipherPrefs_BLOWFISH.setText("Blowfish");
        genKeyCipherPrefs_BLOWFISH.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        genKeyCipherPrefs_BLOWFISH.setMargin(new java.awt.Insets(0, 0, 0, 0));
        genKeyCipherPrefs_BLOWFISH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyCipherPrefs_BLOWFISHActionPerformed(evt);
            }
        });

        jPanel66.add(genKeyCipherPrefs_BLOWFISH);

        genKeyCipherPrefs_AES128.setSelected(true);
        genKeyCipherPrefs_AES128.setText("AES-128");
        genKeyCipherPrefs_AES128.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        genKeyCipherPrefs_AES128.setMargin(new java.awt.Insets(0, 0, 0, 0));
        genKeyCipherPrefs_AES128.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyCipherPrefs_AES128ActionPerformed(evt);
            }
        });

        jPanel66.add(genKeyCipherPrefs_AES128);

        genKeyCipherPrefs_AES192.setSelected(true);
        genKeyCipherPrefs_AES192.setText("AES-192");
        genKeyCipherPrefs_AES192.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        genKeyCipherPrefs_AES192.setMargin(new java.awt.Insets(0, 0, 0, 0));
        genKeyCipherPrefs_AES192.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyCipherPrefs_AES192ActionPerformed(evt);
            }
        });

        jPanel66.add(genKeyCipherPrefs_AES192);

        genKeyCipherPrefs_AES256.setSelected(true);
        genKeyCipherPrefs_AES256.setText("AES-256");
        genKeyCipherPrefs_AES256.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        genKeyCipherPrefs_AES256.setMargin(new java.awt.Insets(0, 0, 0, 0));
        genKeyCipherPrefs_AES256.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyCipherPrefs_AES256ActionPerformed(evt);
            }
        });

        jPanel66.add(genKeyCipherPrefs_AES256);

        genKeyCipherPrefs_TWOFISH.setSelected(true);
        genKeyCipherPrefs_TWOFISH.setText("Twofish");
        genKeyCipherPrefs_TWOFISH.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        genKeyCipherPrefs_TWOFISH.setMargin(new java.awt.Insets(0, 0, 0, 0));
        genKeyCipherPrefs_TWOFISH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyCipherPrefs_TWOFISHActionPerformed(evt);
            }
        });

        jPanel66.add(genKeyCipherPrefs_TWOFISH);

        jPanel65.add(jPanel66);

        jPanel67.setLayout(new java.awt.GridLayout(1, 2));

        defaultSymAlgLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        defaultSymAlgLabel.setText("Default: ");
        jPanel67.add(defaultSymAlgLabel);

        jPanel67.add(defaultSymAlgComboBox);

        jPanel65.add(jPanel67);

        jPanel11.add(jPanel65);

        jPanel17.setLayout(new java.awt.BorderLayout());

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Passphrase"));
        jLabel7.setText("Again");
        jPanel15.add(jLabel7);

        jPasswordField1.setPreferredSize(new java.awt.Dimension(251, 23));
        jPanel15.add(jPasswordField1);

        jPanel17.add(jPanel15, java.awt.BorderLayout.CENTER);

        jLabel8.setText("Passphrase");
        jPanel16.add(jLabel8);

        jPasswordField2.setPreferredSize(new java.awt.Dimension(251, 23));
        jPanel16.add(jPasswordField2);

        jPanel17.add(jPanel16, java.awt.BorderLayout.NORTH);

        jPanel11.add(jPanel17);

        jPanel5.add(jPanel11, java.awt.BorderLayout.CENTER);

        generateKeypairDialog.getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        generateSubkeyDialog.setTitle("Generate Subkey");
        jPanel56.setLayout(new java.awt.BorderLayout());

        jPanel56.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate New Subkey"));
        jPanel56.setPreferredSize(new java.awt.Dimension(410, 210));
        jPanel57.setPreferredSize(new java.awt.Dimension(50, 33));
        genSubkeyOKButton.setText("Generate Subkey");
        genSubkeyOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genSubkeyOKButtonActionPerformed(evt);
            }
        });

        jPanel57.add(genSubkeyOKButton);

        genSubkeyCancelButton.setText("Cancel");
        genSubkeyCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genSubkeyCancelButtonActionPerformed(evt);
            }
        });

        jPanel57.add(genSubkeyCancelButton);

        jPanel56.add(jPanel57, java.awt.BorderLayout.SOUTH);

        jPanel58.setPreferredSize(new java.awt.Dimension(632, 150));
        genSubkeyAlgorithmLabel.setText("Subkey Algorithm: ");
        jPanel61.add(genSubkeyAlgorithmLabel);

        genSubkeyAlgorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(populateComboBox("openpgp.pkalgorithm.available","RSA")));
        genSubkeyAlgorithmComboBox.setSelectedItem(configurationData.getSetting("keymanager.openpgp.keygen.default.pk","RSA"));
        jPanel61.add(genSubkeyAlgorithmComboBox);

        genSubkeySizeLabel.setText("  Subkey Size: ");
        jPanel61.add(genSubkeySizeLabel);

        genSubkeySizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1024 bits", "2048 bits", "4096 bits" }));
        jPanel61.add(genSubkeySizeComboBox);

        jPanel58.add(jPanel61);

        jPanel64.setLayout(new java.awt.BorderLayout());

        jPanel64.setBorder(javax.swing.BorderFactory.createTitledBorder("Passphrase for Signing Key"));
        genSubkeyPassphraseLabel1.setText("Again");
        jPanel62.add(genSubkeyPassphraseLabel1);

        genSubkeyPassphraseField1.setPreferredSize(new java.awt.Dimension(251, 23));
        jPanel62.add(genSubkeyPassphraseField1);

        jPanel64.add(jPanel62, java.awt.BorderLayout.CENTER);

        genSubkeyPassphraseLabel2.setText("Passphrase");
        jPanel63.add(genSubkeyPassphraseLabel2);

        genSubkeyPassphraseField2.setPreferredSize(new java.awt.Dimension(251, 23));
        jPanel63.add(genSubkeyPassphraseField2);

        jPanel64.add(jPanel63, java.awt.BorderLayout.NORTH);

        jPanel58.add(jPanel64);

        jPanel56.add(jPanel58, java.awt.BorderLayout.NORTH);

        generateSubkeyDialog.getContentPane().add(jPanel56, java.awt.BorderLayout.CENTER);

        resultsAddToKeyringItem.setText("Add to Keyring");
        resultsAddToKeyringItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsAddToKeyringItemActionPerformed(evt);
            }
        });

        resultsKeyPopupMenu.add(resultsAddToKeyringItem);

        resultsKeyPopupMenu.add(jSeparator12);

        resultsKeyPropsItem.setText("Properties");
        resultsKeyPropsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsKeyPropsItemActionPerformed(evt);
            }
        });

        resultsKeyPopupMenu.add(resultsKeyPropsItem);

        resultsSubkeyPropsItem.setText("Properties");
        resultsSubkeyPropsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsSubkeyPropsItemActionPerformed(evt);
            }
        });

        resultsSubkeyPopupMenu.add(resultsSubkeyPropsItem);

        resultsSigPropsItem.setText("Properties");
        resultsSigPropsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsSigPropsItemActionPerformed(evt);
            }
        });

        resultsSigPopupMenu.add(resultsSigPropsItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OpenPGP Key Manager");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                OpenPGPKeyManager.this.windowClosing(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Local Keys"));
        jPanel29.setLayout(new java.awt.BorderLayout());

        keyringTree.setDoubleBuffered(true);
        keyringTree.setName("Public Keys");
        keyringTree.setNextFocusableComponent(jButton1);
        keyringTree.setRowHeight(17);
        keyringTree.setShowsRootHandles(true);
        keyringTree.setVisibleRowCount(15);
        keyringTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                keyringTreeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                keyringTreeMouseReleased(evt);
            }
        });

        jScrollPane3.setViewportView(keyringTree);

        jPanel29.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel29, java.awt.BorderLayout.CENTER);

        privateKeysOnlyCheckBox.setText("Show Private Keys Only");
        privateKeysOnlyCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        privateKeysOnlyCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        privateKeysOnlyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateKeysOnlyCheckBoxActionPerformed(evt);
            }
        });

        jPanel26.add(privateKeysOnlyCheckBox);

        jPanel9.add(jPanel26, java.awt.BorderLayout.NORTH);

        generateNewKeypairButton.setText("Generate New Keypair...");
        generateNewKeypairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateNewKeypairButtonActionPerformed(evt);
            }
        });

        jPanel24.add(generateNewKeypairButton);

        jPanel9.add(jPanel24, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Manage Local Keys", jPanel9);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Secret Key Sources"));
        jButton9.setText("Add");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jPanel20.add(jButton9);

        jButton10.setText("Edit");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jPanel20.add(jButton10);

        jButton11.setText("Remove");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jPanel20.add(jButton11);

        jPanel18.add(jPanel20, java.awt.BorderLayout.CENTER);

        jPanel21.setPreferredSize(new java.awt.Dimension(470, 120));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 110));
        secretKeySourcesList.setModel(new KeySourceListModel(populateKeySourceList("keymanager.openpgp.secretlist.")));
        secretKeySourcesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        secretKeySourcesList.setVisibleRowCount(7);
        jScrollPane1.setViewportView(secretKeySourcesList);

        jPanel21.add(jScrollPane1);

        jPanel25.setLayout(new java.awt.BorderLayout());

        jButton14.setText("D");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jPanel25.add(jButton14, java.awt.BorderLayout.CENTER);

        jButton15.setText("U");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jPanel25.add(jButton15, java.awt.BorderLayout.NORTH);

        jPanel21.add(jPanel25);

        jPanel18.add(jPanel21, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel18, java.awt.BorderLayout.CENTER);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Public Key Sources"));
        jButton6.setText("Add");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel22.add(jButton6);

        jButton7.setText("Edit");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jPanel22.add(jButton7);

        jButton8.setText("Remove");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jPanel22.add(jButton8);

        jPanel19.add(jPanel22, java.awt.BorderLayout.CENTER);

        jPanel23.setPreferredSize(new java.awt.Dimension(470, 120));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(400, 110));
        publicKeySourcesList.setModel(new KeySourceListModel(populateKeySourceList("keymanager.openpgp.publiclist.")));
        publicKeySourcesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        publicKeySourcesList.setVisibleRowCount(7);
        jScrollPane2.setViewportView(publicKeySourcesList);

        jPanel23.add(jScrollPane2);

        jPanel27.setLayout(new java.awt.BorderLayout());

        jButton12.setText("D");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jPanel27.add(jButton12, java.awt.BorderLayout.CENTER);

        jButton13.setText("U");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jPanel27.add(jButton13, java.awt.BorderLayout.NORTH);

        jPanel23.add(jPanel27);

        jPanel19.add(jPanel23, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel19, java.awt.BorderLayout.NORTH);

        jTabbedPane1.addTab("Additional Key Sources", jPanel4);

        jPanel28.setLayout(new java.awt.BorderLayout());

        jPanel52.setLayout(new java.awt.BorderLayout());

        jPanel52.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Criteria"));
        jPanel52.setPreferredSize(new java.awt.Dimension(530, 225));
        jPanel59.setPreferredSize(new java.awt.Dimension(190, 32));
        keySearchByLabel.setText("Search by");
        jPanel59.add(keySearchByLabel);

        keySearchByComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keySearchByComboBoxActionPerformed(evt);
            }
        });

        jPanel59.add(keySearchByComboBox);

        jPanel52.add(jPanel59, java.awt.BorderLayout.NORTH);

        jPanel55.setLayout(new java.awt.BorderLayout());

        keySearchButton.setText("Search");
        keySearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keySearchButtonActionPerformed(evt);
            }
        });

        jPanel53.add(keySearchButton);

        jPanel55.add(jPanel53, java.awt.BorderLayout.CENTER);

        jPanel54.setPreferredSize(new java.awt.Dimension(53, 64));
        keySearchInLabel.setText("in ");
        jPanel54.add(keySearchInLabel);

        jPanel54.add(keySearchComboBox);

        jPanel55.add(jPanel54, java.awt.BorderLayout.NORTH);

        jPanel52.add(jPanel55, java.awt.BorderLayout.SOUTH);

        jPanel60.setLayout(new java.awt.BorderLayout());

        keyIDCriteriaPanel.setPreferredSize(new java.awt.Dimension(470, 29));
        keySearchKeyIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keySearchKeyIDLabel.setText("    Key ID: ");
        keyIDCriteriaPanel.add(keySearchKeyIDLabel);

        keySearchKeyIDField.setColumns(16);
        keyIDCriteriaPanel.add(keySearchKeyIDField);

        keySearchFreeTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keySearchFreeTextLabel.setText("    Free Text: ");
        keyIDCriteriaPanel.add(keySearchFreeTextLabel);

        keySearchFreeTextField.setPreferredSize(new java.awt.Dimension(150, 19));
        keyIDCriteriaPanel.add(keySearchFreeTextField);

        jPanel60.add(keyIDCriteriaPanel, java.awt.BorderLayout.CENTER);

        emailCriteriaPanel.setPreferredSize(new java.awt.Dimension(510, 29));
        keySearchNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keySearchNameLabel.setText("Name: ");
        emailCriteriaPanel.add(keySearchNameLabel);

        keySearchNameField.setPreferredSize(new java.awt.Dimension(130, 19));
        emailCriteriaPanel.add(keySearchNameField);

        keySearchEmailLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keySearchEmailLabel.setText("    Email Address: ");
        emailCriteriaPanel.add(keySearchEmailLabel);

        keySearchEmailField.setPreferredSize(new java.awt.Dimension(200, 19));
        emailCriteriaPanel.add(keySearchEmailField);

        jPanel60.add(emailCriteriaPanel, java.awt.BorderLayout.NORTH);

        jPanel52.add(jPanel60, java.awt.BorderLayout.CENTER);

        jPanel28.add(jPanel52, java.awt.BorderLayout.NORTH);

        jPanel51.setLayout(new java.awt.BorderLayout());

        jPanel51.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Results"));
        jPanel51.setPreferredSize(new java.awt.Dimension(91, 129));
        keySearchResultsLabel.setText("  ");
        jPanel51.add(keySearchResultsLabel, java.awt.BorderLayout.NORTH);

        jScrollPane5.setPreferredSize(new java.awt.Dimension(75, 95));
        resultsTree.setRootVisible(false);
        resultsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resultsTreeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resultsTreeMouseReleased(evt);
            }
        });

        jScrollPane5.setViewportView(resultsTree);

        jPanel51.add(jScrollPane5, java.awt.BorderLayout.SOUTH);

        jPanel28.add(jPanel51, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Key Search", jPanel28);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Local Files"));
        jPanel8.setMaximumSize(new java.awt.Dimension(700, 650));
        jPanel8.setPreferredSize(new java.awt.Dimension(193, 96));
        jPanel6.setMinimumSize(new java.awt.Dimension(177, 33));
        jLabel1.setText("Secret Key File");
        jPanel6.add(jLabel1);

        jTextField1.setText(StringHelper.reduceWinPath(configurationData.getSetting("keymanager.openpgp.primary.secring","secring.pgp")));
        jTextField1.setPreferredSize(new java.awt.Dimension(280, 19));
        jPanel6.add(jTextField1);

        jButton3.setText("Browse...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel6.add(jButton3);

        jPanel8.add(jPanel6, java.awt.BorderLayout.CENTER);

        jLabel2.setText("Public Key File");
        jPanel7.add(jLabel2);

        jTextField2.setText(StringHelper.reduceWinPath(configurationData.getSetting("keymanager.openpgp.primary.pubring","pubring.pgp")));
        jTextField2.setPreferredSize(new java.awt.Dimension(280, 19));
        jPanel7.add(jTextField2);

        jButton4.setText("Browse...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel7.add(jButton4);

        jPanel8.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel8, java.awt.BorderLayout.NORTH);

        jTabbedPane1.addTab("Preferences", jPanel3);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jButton1.setText("Save Changes and Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);

        jButton2.setText("Cancel Changes and Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trustedIntroducerCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trustedIntroducerCheckboxActionPerformed
// TODO add your handling code here:
        trustDepthLabel.setEnabled(trustedIntroducerCheckbox.isSelected()); 
        trustDepthComboBox.setEnabled(trustedIntroducerCheckbox.isSelected());
        trustAmountLabel.setEnabled(trustedIntroducerCheckbox.isSelected()); 
        trustAmountComboBox.setEnabled(trustedIntroducerCheckbox.isSelected());
    }//GEN-LAST:event_trustedIntroducerCheckboxActionPerformed

    private void genKeyCipherPrefs_TWOFISHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyCipherPrefs_TWOFISHActionPerformed
        String[] prefs = populateDefaultSymAlgComboBox();
        if (prefs == null) {
            JOptionPane.showMessageDialog(null,
                    "At least one symmetric algorithm must be selected",
                    "Error", JOptionPane.ERROR_MESSAGE);
            genKeyCipherPrefs_TWOFISH.setSelected(true);
            populateDefaultSymAlgComboBox();
        }
    }//GEN-LAST:event_genKeyCipherPrefs_TWOFISHActionPerformed

    private void genKeyCipherPrefs_AES256ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyCipherPrefs_AES256ActionPerformed
        String[] prefs = populateDefaultSymAlgComboBox();
        if (prefs == null) {
            JOptionPane.showMessageDialog(null,
                    "At least one symmetric algorithm must be selected",
                    "Error", JOptionPane.ERROR_MESSAGE);
            genKeyCipherPrefs_AES256.setSelected(true);
            populateDefaultSymAlgComboBox();
        }
    }//GEN-LAST:event_genKeyCipherPrefs_AES256ActionPerformed

    private void genKeyCipherPrefs_AES192ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyCipherPrefs_AES192ActionPerformed
        String[] prefs = populateDefaultSymAlgComboBox();
        if (prefs == null) {
            JOptionPane.showMessageDialog(null,
                    "At least one symmetric algorithm must be selected",
                    "Error", JOptionPane.ERROR_MESSAGE);
            genKeyCipherPrefs_AES192.setSelected(true);
            populateDefaultSymAlgComboBox();
        }
    }//GEN-LAST:event_genKeyCipherPrefs_AES192ActionPerformed

    private void genKeyCipherPrefs_AES128ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyCipherPrefs_AES128ActionPerformed
        String[] prefs = populateDefaultSymAlgComboBox();
        if (prefs == null) {
            JOptionPane.showMessageDialog(null,
                    "At least one symmetric algorithm must be selected",
                    "Error", JOptionPane.ERROR_MESSAGE);
            genKeyCipherPrefs_AES128.setSelected(true);
            populateDefaultSymAlgComboBox();
        }
    }//GEN-LAST:event_genKeyCipherPrefs_AES128ActionPerformed

    private void genKeyCipherPrefs_BLOWFISHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyCipherPrefs_BLOWFISHActionPerformed
        String[] prefs = populateDefaultSymAlgComboBox();
        if (prefs == null) {
            JOptionPane.showMessageDialog(null,
                    "At least one symmetric algorithm must be selected",
                    "Error", JOptionPane.ERROR_MESSAGE);
            genKeyCipherPrefs_BLOWFISH.setSelected(true);
            populateDefaultSymAlgComboBox();
        }
    }//GEN-LAST:event_genKeyCipherPrefs_BLOWFISHActionPerformed

    private void genKeyCipherPrefs_CAST5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyCipherPrefs_CAST5ActionPerformed
        String[] prefs = populateDefaultSymAlgComboBox();
        if (prefs == null) {
            JOptionPane.showMessageDialog(null,
                    "At least one symmetric algorithm must be selected",
                    "Error", JOptionPane.ERROR_MESSAGE);
            genKeyCipherPrefs_CAST5.setSelected(true);
            populateDefaultSymAlgComboBox();
        }
    }//GEN-LAST:event_genKeyCipherPrefs_CAST5ActionPerformed

    private void genKeyCipherPrefs_TRIPLEDESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyCipherPrefs_TRIPLEDESActionPerformed
        String[] prefs = populateDefaultSymAlgComboBox();
        if (prefs == null) {
            JOptionPane.showMessageDialog(null,
                    "At least one symmetric algorithm must be selected",
                    "Error", JOptionPane.ERROR_MESSAGE);
            genKeyCipherPrefs_TRIPLEDES.setSelected(true);
            populateDefaultSymAlgComboBox();
        }
    }//GEN-LAST:event_genKeyCipherPrefs_TRIPLEDESActionPerformed

    private void genKeyCipherPrefs_IDEAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyCipherPrefs_IDEAActionPerformed
        String[] prefs = populateDefaultSymAlgComboBox();
        if (prefs == null) {
            JOptionPane.showMessageDialog(null,
                    "At least one symmetric algorithm must be selected",
                    "Error", JOptionPane.ERROR_MESSAGE);
            genKeyCipherPrefs_IDEA.setSelected(true);
            populateDefaultSymAlgComboBox();
        }
    }//GEN-LAST:event_genKeyCipherPrefs_IDEAActionPerformed

    private void addSubkeyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubkeyItemActionPerformed
        generateSubkeyDialog.pack();
        centralise(generateSubkeyDialog);
        generateSubkeyDialog.setVisible(true);
    }//GEN-LAST:event_addSubkeyItemActionPerformed

    private void genSubkeyCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genSubkeyCancelButtonActionPerformed
        generateSubkeyDialog.setVisible(false);
    }//GEN-LAST:event_genSubkeyCancelButtonActionPerformed

    private void genSubkeyOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genSubkeyOKButtonActionPerformed
        PrimarySigningKey keyToAddSubkey = (PrimarySigningKey)lastNodeClicked;
        
        generateSubkey(keyToAddSubkey);
        generateSubkeyDialog.setVisible(false);
    }//GEN-LAST:event_genSubkeyOKButtonActionPerformed

    /** Method to generate a subkey and add it to a primary signing key */
    private void generateSubkey(PrimarySigningKey psk) {
        try {
            // validate form
            String pass1 = new String(genSubkeyPassphraseField1.getPassword());
            String pass2 = new String(genSubkeyPassphraseField2.getPassword());
            
            String encryptAlg = (String)genSubkeyAlgorithmComboBox.getSelectedItem();
            int subkeySizeIndex = genSubkeySizeComboBox.getSelectedIndex();
            String symAlg = configurationData.getSetting(
            		"openpgp.symmetricalgorithm.used","IDEA");
           
            int symmetricAlgorithm = 0;
            int subkeyAlgorithm = 0;
            int subkeySize = 0;

            if (pass1.compareTo(pass2)!=0) {
                javax.swing.JOptionPane.showMessageDialog(null, "Passphrases " +
                		"do not match!", "Problem", 
                		javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // work out symmetric algorithm
            try {
            	symmetricAlgorithm = 
            			SymmetricAlgorithmSettings.getCipherCode(symAlg);
            } catch (AlgorithmException e) {
            	System.err.println("Symmetric algorithm '" + symAlg + 
            			"' is not supported.");
            	return;
            }
            
            // work out subkey size
            switch (subkeySizeIndex) {
	        	case 0: subkeySize = 1024; break;
	        	case 1: subkeySize = 2048; break;
	        	case 2: subkeySize = 4096; break;
	        }
            
            // work out pk algorithm
            if ("RSA".compareToIgnoreCase(encryptAlg)==0) {
                subkeyAlgorithm = PublicKeyAlgorithmSettings.RSA_ENCRYPTSIGN;
            } else if ("El Gamal".compareToIgnoreCase(encryptAlg)==0) {
                subkeyAlgorithm = PublicKeyAlgorithmSettings.ELGAMAL_ENCRYPT;
            } else {
                System.err.println("Encryption algorithm '" + encryptAlg + 
                		"' is not supported.");
                return;
            }
            
            // key files to use
            OpenPGPPublicSubkeyTrap publicCache = new OpenPGPPublicSubkeyTrap(
					keyParser, keyStore, psk, new PassPhrase(pass1.getBytes()));
			KeyHandler secretCache = publicCache.getSecretSubkeyTrap();
			keyStore.addObserver(this);  // this sends update when key changed
            
            SubkeyGenStatusDlg status = new SubkeyGenStatusDlg(
            		new javax.swing.JFrame(), false);
            
            status.generateOpenPGPSubkey(publicCache, secretCache, psk,
					symmetricAlgorithm, subkeyAlgorithm, subkeySize, 
					pass1.getBytes());

        } catch (Exception e) {
        	e.printStackTrace();
            System.err.println(e.getMessage());
            javax.swing.JOptionPane.showMessageDialog(null, 
            		e.getMessage(), "Problem", 
            		javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void exportPublicKeyToKeyServerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPublicKeyToKeyServerItemActionPerformed
        PrimarySigningKey keyToExport = (PrimarySigningKey)lastNodeClicked;
        
        KeySourceListModel publicList = 
                (KeySourceListModel)publicKeySourcesList.getModel();
    	HashMap keyServers = new HashMap();
    	for (int i = 0; i < publicList.getSize(); ++i) {
    		KeyHandler kh = (KeyHandler)publicList.getElementAt(i);
    		if (kh instanceof KeyServer) {
                    keyServers.put(kh.toString(), kh);
                }
    	}
        Object[] keys = keyServers.keySet().toArray();
        
        String choice = (String)JOptionPane.showInputDialog(null,
                    "Please choose the keyserver you want to export the key to:",
                    "Choose Key Server",
                    JOptionPane.PLAIN_MESSAGE,
                    null,  // icon to use
                    keys,
                    keys[0]);
        
        if (choice != null) {  // an option was chosen, no cancellation
            debug.Debug.println(1, "Key Server chosen: '" + choice + "'");
            
            KeyServer ks = (KeyServer)keyServers.get(choice);
            KeyObject[] keyObj = new KeyObject[1];
            keyObj[0] = keyToExport;
            try {
                ks.addKeys(keyObj, null, null);
            } catch(KeyHandlerException e) {
                JOptionPane.showMessageDialog(null, "Could not upload Key," +
                        " ID " + keyToExport.getShortKeyID() +
                        ", to key server:\n" + e.getMessage(),
                        "Could not upload key", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_exportPublicKeyToKeyServerItemActionPerformed

    private void primaryKeyAlgorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primaryKeyAlgorithmComboBoxActionPerformed
        // Primary signing key algorithm
    	String signingAlg = (String)primaryKeyAlgorithmComboBox.getSelectedItem();
    	
    	// if DSA is the choice, fix the key size at 1024 bits
    	if (signingAlg.equals("DSA")) {
    		primaryKeySizeComboBox.setSelectedIndex(0);
    		primaryKeySizeComboBox.setEnabled(false);
    	} else {
    		primaryKeySizeComboBox.setEnabled(true);
    	}
    }//GEN-LAST:event_primaryKeyAlgorithmComboBoxActionPerformed

    private void resultsAddToKeyringItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsAddToKeyringItemActionPerformed
        PrimarySigningKey foundKey = (PrimarySigningKey)lastNodeClicked;
        
        boolean isAddApproved = false;
        try {
        	KeyIdentifier id = 
        		new OpenPGPKeyIDKeyIdentifier(foundKey.getRawKeyID());
        	List keys = keyStore.findPrimaryKeys(id);
        	if (keys != null && keys.size() > 0) {
        		if (keys.size() == 1) {
        			PrimarySigningKey existingKey = (PrimarySigningKey)keys.get(0);
        			int response = JOptionPane.showConfirmDialog(null,
        	                "There is already a key in the keyring that " +
        	                "matches the key ID of this key.\n" +
        	                "Are you sure you want to replace that key with " +
        	                "this key?", 
        	                "Please Confirm", JOptionPane.YES_NO_OPTION);
        			if (response == JOptionPane.YES_OPTION) {
        				if (!foundKey.hasPrivateKeyPart() && 
        						existingKey.hasPrivateKeyPart()) {
        					// absorb the public part
        					existingKey.absorb(foundKey, true);
        				} else if (!existingKey.hasPrivateKeyPart() && 
        						foundKey.hasPrivateKeyPart()) {
        					// absorb the private part
        					existingKey.absorb(foundKey, false);
        				} else {
        					isAddApproved = true;
        				}
        			}
        		} else {
        			throw new KeyHandlerException(
        					"Keys exist in keyring with duplicate Key IDs");
        		}
        	} else {
        		isAddApproved = true;
        	}
        } catch(KeyHandlerException e) {
        	JOptionPane.showMessageDialog(null,
                    "Could not add Key, ID \"" + foundKey.getShortKeyID() +
                    "\" to keyring:\n" + e.getMessage(),
                    "Could not add key", JOptionPane.ERROR_MESSAGE);
        } catch(KeyMismatchException e) {
        	JOptionPane.showMessageDialog(null,
                    "Could not add Key, ID \"" + foundKey.getShortKeyID() +
                    "\" to keyring:\n" + e.getMessage(),
                    "Could not merge mismatched public and private keys", 
                    JOptionPane.ERROR_MESSAGE);
        }
        
        if (isAddApproved) {  // add trust packets, and add key to the keyring
        	KeyStoreTrustManager.applyClearTrust(foundKey, true);
        	keyStore.addObserver(this);
    		keyStore.addKey(foundKey);
            JOptionPane.showMessageDialog(null, 
    				"The key has been added to your keyring");
        }
    }//GEN-LAST:event_resultsAddToKeyringItemActionPerformed

    private void resultsSigPropsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsSigPropsItemActionPerformed
        // re-use the signature properties from the keyring tree
        sigPropsItemActionPerformed(evt);
    }//GEN-LAST:event_resultsSigPropsItemActionPerformed

    private void resultsSubkeyPropsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsSubkeyPropsItemActionPerformed
        // re-use the subkey properties from the keyring tree
        subkeyPropsItemActionPerformed(evt);
    }//GEN-LAST:event_resultsSubkeyPropsItemActionPerformed

    private void resultsKeyPropsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsKeyPropsItemActionPerformed
        PrimarySigningKey key = (PrimarySigningKey)lastNodeClicked;
        
        // set up the key properties in the same way as for the keyring tree
        setupKeyPropsDialog(key);
        
        // reset and blank out the owner trust combo box for found keys
        keyPropsOwnerTrustComboBox.setModel(
                new DefaultComboBoxModel(new String[] {"Unknown"}));
        keyPropsOwnerTrustComboBox.setSelectedIndex(0);
        keyPropsOwnerTrustComboBox.setEnabled(false);
        
        //and display the dialog
        keyPropsDialog.pack();
        centralise(keyPropsDialog);
        keyPropsDialog.setVisible(true);
    }//GEN-LAST:event_resultsKeyPropsItemActionPerformed

    private void resultsTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTreeMouseReleased
        if (evt.isPopupTrigger()) {  // only interested in popup menus
        	handleResultsPopupTrigger(evt);
        }
    }//GEN-LAST:event_resultsTreeMouseReleased

    private void resultsTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTreeMousePressed
        if (evt.isPopupTrigger()) {  // only interested in popup menus
        	handleResultsPopupTrigger(evt);
        }
    }//GEN-LAST:event_resultsTreeMousePressed

    /** a common method to handle the keyring popup menu event - this can be
     * called from two different methods because different OSes treat popup
     * actions differently (e.g. Windows, MacOS)
     */
    private void handleResultsPopupTrigger(java.awt.event.MouseEvent evt) {
    	TreePath path = resultsTree.getPathForLocation(evt.getX(), evt.getY());
        resultsTree.setSelectionPath(path);
        try { 
            lastNodeClicked = (TreeNode)path.getLastPathComponent();
        } catch (Exception e){}
        // show the popup
        if (lastNodeClicked instanceof PrimarySigningKey) { // key popup
            resultsKeyPopupMenu.show(
                    (Component)evt.getSource(), evt.getX(), evt.getY());
        } else if (lastNodeClicked instanceof Subkey) { // subkey popup
            resultsSubkeyPopupMenu.show(
                    (Component)evt.getSource(), evt.getX(), evt.getY());
        } else if (lastNodeClicked instanceof Signature) { // signature popup
            resultsSigPopupMenu.show(
                    (Component)evt.getSource(), evt.getX(), evt.getY());
        }
    }
    
    private void keySearchByComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keySearchByComboBoxActionPerformed
        // set up the key search criteria combo box, enabling only those fields
    	// relevant to the combo box choice
    	int criteria = keySearchByComboBox.getSelectedIndex();
        keySearchNameField.setEnabled(false);
        keySearchNameLabel.setEnabled(false);
        keySearchEmailField.setEnabled(false);
        keySearchEmailLabel.setEnabled(false);
        keySearchKeyIDField.setEnabled(false);
        keySearchKeyIDLabel.setEnabled(false);
        keySearchFreeTextField.setEnabled(false);
        keySearchFreeTextLabel.setEnabled(false);
        switch (criteria) {
            case 0:
                keySearchNameField.setEnabled(true);
                keySearchNameLabel.setEnabled(true);
                keySearchEmailField.setEnabled(true);
                keySearchEmailLabel.setEnabled(true);
                break;
            case 1:
                keySearchKeyIDField.setEnabled(true);
                keySearchKeyIDLabel.setEnabled(true);
                break;
            case 2:
                keySearchFreeTextField.setEnabled(true);
                keySearchFreeTextLabel.setEnabled(true);
                break;
        }
    }//GEN-LAST:event_keySearchByComboBoxActionPerformed

    private void keySearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keySearchButtonActionPerformed
    	debug.Debug.println(1, "Key search button pressed");
        KeyHandler kh = (KeyHandler)keySearchComboBox.getSelectedItem();
        if (kh != null) {
            debug.Debug.println(1, "Key Handler " + kh.toString() + " chosen");
            KeyIdentifier id = null;
            boolean isValid = true;
            int criteria = keySearchByComboBox.getSelectedIndex();
            switch (criteria) {
                case 0:  // email address
                    id = new OpenPGPStandardKeyIdentifier(
                            keySearchNameField.getText().getBytes(), 
                            keySearchEmailField.getText().getBytes());
                    break;
                case 1:  // key ID
                    String keyID = keySearchKeyIDField.getText().trim();
                    isValid = KeyUtils.isKeyIDValid(keyID);
                    if (!isValid) {
                        JOptionPane.showMessageDialog(null,
                                "Invalid Key ID \"" + keyID + "\".\nThe Key ID " +
                                "should be 8 or 16 hex digits.",
                                "Invalid Key ID", JOptionPane.ERROR_MESSAGE);
                    } else {
                        try {
                        	byte[] ba = KeyUtils.getKeyID(keyID);
                        	debug.Debug.println(1, "key id byte length = " + ba.length + ", hex: " + StringHelper.toHexString(ba)); 
                        	id = new OpenPGPKeyIDKeyIdentifier(ba);
                        } catch(KeyHandlerException e) {e.printStackTrace(); isValid = false;}
                    }
                    break;
                case 2:  // free text
                    debug.Debug.println(1, "Search String: " + 
                            keySearchFreeTextField.getText());
                    id = new OpenPGPFreeTextKeyIdentifier(
                            keySearchFreeTextField.getText());
                    break;
            }
            String resultsMessage = " ";
            if (isValid) {
            	debug.Debug.println(1, "isValid = " + isValid);
                try {
                	KeyObject[] keyData = kh.findKeys(id, null);
                    if (keyData != null && keyData.length > 0) {
                    	resultsMessage = keyData.length + " key data object" +
                    			(keyData.length>1?"s":"") + " found";
                    	if (keyData[0] instanceof PrimarySigningKey) {
                    		results.clear();
                    		for (int i = 0; i < keyData.length; ++i) {
                    			results.addKey((PrimarySigningKey)keyData[i]);
                    		}
                    		//TODO: validate using local key store keys too
                    		KeyStoreValidator.validateSignatures(results);
                    		resultsTreeModel.nodeStructureChanged(results);
                    	}
                    } else {
                    	resultsMessage = "No key data objects found";
                    	results.clear();
                    	resultsTreeModel.nodeStructureChanged(results);
                    }
                } catch(KeyHandlerException e) {
                    JOptionPane.showMessageDialog(null,
                            "There was a problem encountered while searching " +
                            "for keys:\n" + e.getMessage(),
                            "Key Search Error", JOptionPane.ERROR_MESSAGE);
                } catch(ChecksumFailureException e) {
                    JOptionPane.showMessageDialog(null,
                            "There was a problem encountered while searching " +
                            "for keys:\n" + e.getMessage(),
                            "Key Search Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {debug.Debug.println(1, "isValid = " + isValid);}
            keySearchResultsLabel.setText(resultsMessage);
        }
    }//GEN-LAST:event_keySearchButtonActionPerformed

    private void exportPrivateKeyringToBinFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPrivateKeyringToBinFileItemActionPerformed
        OpenPGPKeyExporter file = getOutputFile(
                "Save Private Keyring", "Export OpenPGP Private Keyring", true);
        if (file != null) {
        	try {
        		file.exportPrivateKeyring(keyStore);
        	} catch(KeyHandlerException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem exporting the keyring.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	} catch(IOException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem writing to file.",
						"Keyring Export Error", JOptionPane.ERROR_MESSAGE);
        	}
        }
    }//GEN-LAST:event_exportPrivateKeyringToBinFileItemActionPerformed

    private void exportPrivateKeyringToAscFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPrivateKeyringToAscFileItemActionPerformed
        OpenPGPKeyExporter file = getOutputFile(
                "Save Private Keyring", "Export OpenPGP Private Keyring", false);
        if (file != null) {
        	try {
        		file.exportPrivateKeyring(keyStore);
        	} catch(KeyHandlerException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem exporting the keyring.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	} catch(IOException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem writing to file.",
						"Keyring Export Error", JOptionPane.ERROR_MESSAGE);
        	}
        }
    }//GEN-LAST:event_exportPrivateKeyringToAscFileItemActionPerformed

    private void exportPublicKeyringToBinFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPublicKeyringToBinFileItemActionPerformed
        OpenPGPKeyExporter file = getOutputFile(
                "Save Public Keyring", "Export OpenPGP Public Keyring", true);
        if (file != null) {
        	try {
        		file.exportPublicKeyring(keyStore);
        	} catch(KeyHandlerException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem exporting the keyring.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	} catch(IOException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem writing to file.",
						"Keyring Export Error", JOptionPane.ERROR_MESSAGE);
        	}
        }
    }//GEN-LAST:event_exportPublicKeyringToBinFileItemActionPerformed

    private void exportPublicKeyringToAscFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPublicKeyringToAscFileItemActionPerformed
        OpenPGPKeyExporter file = getOutputFile(
                "Save Public Keyring", "Export OpenPGP Public Keyring", false);
        if (file != null) {
        	try {
        		file.exportPublicKeyring(keyStore);
        	} catch(KeyHandlerException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem exporting the keyring.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	} catch(IOException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem writing to file.",
						"Keyring Export Error", JOptionPane.ERROR_MESSAGE);
        	}
        }
    }//GEN-LAST:event_exportPublicKeyringToAscFileItemActionPerformed

    private void createNewKeyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewKeyMenuItemActionPerformed
        populateDefaultSymAlgComboBox();
        generateKeypairDialog.pack();
        generateKeypairDialog.setVisible(true);
    }//GEN-LAST:event_createNewKeyMenuItemActionPerformed

    private void privateKeysOnlyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateKeysOnlyCheckBoxActionPerformed
        keyStore.setPrivateKeysOnly(privateKeysOnlyCheckBox.isSelected());
        keyStoreTreeModel.reload(keyStore);
    }//GEN-LAST:event_privateKeysOnlyCheckBoxActionPerformed

    private void generateKeyPairCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeyPairCancelButtonActionPerformed
        generateKeypairDialog.setVisible(false);
    }//GEN-LAST:event_generateKeyPairCancelButtonActionPerformed
    
    private void chooseSigningKeyCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSigningKeyCancelButtonActionPerformed
        chooseSigningKeyDialog.setVisible(false);
    }//GEN-LAST:event_chooseSigningKeyCancelButtonActionPerformed
    
    /** Method to flag a change in the keyring, this should be called anywhere 
     * the keyring changes. It would be neater to change the keyring classes
     * so that this method is on the keyring itself, but due to time constraints
     * that feature is on the wishlist for now.
     */
    private void keyringHasChanged() {
    	keyStoreHasChanged = true;
    }
    
    /** Method to receive a notification from the keyring that the new key has
     * been added. The argument is currently being ignored (because only one 
     * action causes an update), but can easily be incorporated if more keyring
     * actions start being observed. This object is added as a keyring observer
     * in the 'generateKey()' method, and is removed when the update is 
     * received. If the key generation fails no harm is done, the observer will
     * be removed the next time round.
     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
	 */
	public void update(Observable observable, Object arg) {
		if (observable == keyStore) {
			keyringHasChanged();
			keyStoreTrustManager.refreshTrust(keyStore);
			keyStoreTreeModel.nodeStructureChanged(keyStore);
			observable.deleteObserver(this);
		}
	}

	private void chooseSigningKeyOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSigningKeyOKButtonActionPerformed
        UserID toBeSigned = (UserID)lastNodeClicked;
        
        String choice = (String)signingKeyComboBox.getSelectedItem();
        if (choice != null) {  // an option was chosen
            PrimarySigningKey certifier = (PrimarySigningKey)keyMap.get(choice);
            debug.Debug.println(1, "Key ID chosen: '" + certifier.getShortKeyID() + "'");
            
            PassPhrase passPhrase = requestPassPhrase();
            
            if (passPhrase != null) {
            	try {
            		int trustAmount = trustAmountComboBox.getSelectedIndex() == 0 ? 60 : 120;
            		certifier.certifyBinding(toBeSigned, passPhrase, 
                                sigIsExportableCheckBox.isSelected(),
                                trustedIntroducerCheckbox.isSelected(),
                                trustDepthComboBox.getSelectedIndex(), trustAmount);
            		keyringHasChanged();
            		keyStoreTreeModel.nodeStructureChanged(toBeSigned);
            		keyStoreTrustManager.refreshTrust(keyStore);
            	} catch(CertificationException e) {
            		System.err.println(e.getMessage());
            		JOptionPane.showMessageDialog(null,
                		    "The user-key binding could not be certified",
                		    "Signing Failed",
                		    JOptionPane.WARNING_MESSAGE);
            	}
            }
        }
        chooseSigningKeyDialog.setVisible(false);
    }//GEN-LAST:event_chooseSigningKeyOKButtonActionPerformed

    private void addUserBindingCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserBindingCancelButtonActionPerformed
        addUserBindingDialog.setVisible(false);
    }//GEN-LAST:event_addUserBindingCancelButtonActionPerformed

    private void addUserBindingOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserBindingOKButtonActionPerformed
        PrimarySigningKey primaryKey = (PrimarySigningKey)lastNodeClicked;
        
        String emailName = addNameTextField.getText().trim();
        String emailAddress = addEmailTextField.getText().trim();
        
        if (emailName.length() == 0 || emailAddress.length() == 0) {
            JOptionPane.showMessageDialog(null, 
                    "Both email name and email address must be filled.", 
                    "Invalid Email Address", JOptionPane.ERROR_MESSAGE);
        } else if (!isValidEmailAddress(emailAddress)) {
        	JOptionPane.showMessageDialog(null, 
                    "The email address is not well-formed.", 
                    "Invalid Email Address", JOptionPane.ERROR_MESSAGE);
        } else {
            
            PassPhrase passPhrase = requestPassPhrase();
            
            if (passPhrase != null) {  // operation was not cancelled
            	String emailInFull = emailName + " <" + emailAddress + ">";
                debug.Debug.println(1, "Adding email address '" + emailInFull +
                        "' here");
                try {
                	OpenPGPStandardKeyIdentifier userIdentifier = 
                			new OpenPGPStandardKeyIdentifier(emailInFull);
                	primaryKey.createBinding(userIdentifier, passPhrase);
                	keyringHasChanged();
                	keyStoreTreeModel.nodeStructureChanged(primaryKey);
            		keyStoreTrustManager.refreshTrust(keyStore);
                } catch(KeyHandlerException e) {
                	JOptionPane.showMessageDialog(null, 
                            "The email address is not well-formed.", 
                            "Invalid Email Address", JOptionPane.ERROR_MESSAGE);
                } catch(UserBindingException e) {
                	JOptionPane.showMessageDialog(null, 
                            "Could not create the new email address.", 
                            "User Binding Errors", JOptionPane.ERROR_MESSAGE);
                }
            }
            addUserBindingDialog.setVisible(false);
        }
    }//GEN-LAST:event_addUserBindingOKButtonActionPerformed

    /** Method to perform basic validation on an email address */
    private boolean isValidEmailAddress(String email) {
    	boolean result = true;
        // check that the characters '<' and '>' do not occur
        if (email.indexOf('<') != -1 || email.indexOf('>') != -1) {
            result = false;
        } else {
            int atIndex = email.indexOf('@');
            // invalid if '@' is missing or email has no chars before/after '@'
            if (atIndex <= 0 || atIndex == (email.length() - 1)) {
                result = false;
            } else if (email.lastIndexOf('@') != atIndex) { // only one '@' allowed
                result = false;
            }
        }
    	return result;
    }
    
    /** Method to centralise a dialog box */
    private void centralise(JDialog dialog) {
        java.awt.Dimension screenSize = 
                java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = dialog.getSize();
        dialog.setLocation((screenSize.width-dialogSize.width)/2,
                (screenSize.height-dialogSize.height)/2);
    }
    
    private void addEmailAddressItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmailAddressItemActionPerformed
        // clear the email and name fields for display
        addEmailTextField.setText("");
        addNameTextField.setText("");
        
        addUserBindingDialog.pack();
        centralise(addUserBindingDialog);
        addUserBindingDialog.setVisible(true);
    }//GEN-LAST:event_addEmailAddressItemActionPerformed

    private void exportPrivateKeyToBinFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPrivateKeyToBinFileItemActionPerformed
        PrimarySigningKey key = (PrimarySigningKey)lastNodeClicked;
        OpenPGPKeyExporter file = getOutputFile(
                "Save Private Key", "Export OpenPGP Private Key", true);
        if (file != null) {
        	try {
        		file.exportPrivateCertificate(key, false);
        	} catch(KeyHandlerException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem exporting the key.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	} catch(IOException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem writing to file.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	}
            
        }
    }//GEN-LAST:event_exportPrivateKeyToBinFileItemActionPerformed

    private void exportPublicKeyToBinFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPublicKeyToBinFileItemActionPerformed
        PrimarySigningKey key = (PrimarySigningKey)lastNodeClicked;
        OpenPGPKeyExporter file = getOutputFile(
                "Save Public Key", "Export OpenPGP Public Key", true);
        if (file != null) {
            try {
            	file.exportPublicCertificate(key, false);
        	} catch(KeyHandlerException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem exporting the key.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	} catch(IOException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem writing to file.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	}
        }
    }//GEN-LAST:event_exportPublicKeyToBinFileItemActionPerformed

    /** Method to get an output file ready for export */
    private OpenPGPKeyExporter getOutputFile(String approveText, String title, 
            boolean isBinary) {
        OpenPGPKeyExporter exportFile = null;      
        // set up the file chooser
        if (isBinary) 
            jFileChooser1.setFileFilter(binaryFileFilter);
        else
            jFileChooser1.setFileFilter(asciiFileFilter);
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.setApproveButtonText(approveText);
        jFileChooser1.setDialogTitle(title);
        // get the filename from the user
        int retval = jFileChooser1.showSaveDialog(null);
        if (retval == JFileChooser.APPROVE_OPTION) {  // export the key
            File file = jFileChooser1.getSelectedFile();
            if (isBinary)
                exportFile = new OpenPGPBinaryKeyFile(file, keyParser);
            else
                exportFile = new OpenPGPAsciiKeyFile(file, keyParser);
        }
        return exportFile;
    }
    
    /** array of displayable trust values, used in the owner trust combo box */
    private final static String[] ownerTrustValues = {
            "Not Trusted",
            "Usually Trusted",
            "Always Trusted",
            "Ultimate Trust"
        };
    
    private void keyPropsOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyPropsOKButtonActionPerformed
        PrimarySigningKey key = (PrimarySigningKey)lastNodeClicked;
        
        String selection = (String)keyPropsOwnerTrustComboBox.getSelectedItem();
        if (!selection.equals(KeyStoreTrustManager.getDisplayableTrust(key))) {
            // selection has changed
            switch(keyPropsOwnerTrustComboBox.getSelectedIndex()) {
            	case 0: KeyStoreTrustManager.applyTrust(key, 
            					TrustValues.OWNERTRUST_NOT_USUALLY_TRUSTED);
            		break;
            	case 1: KeyStoreTrustManager.applyTrust(key, 
            					TrustValues.OWNERTRUST_USUALLY_TRUSTED);
            		break;
            	case 2: KeyStoreTrustManager.applyTrust(key, 
    							TrustValues.OWNERTRUST_ALWAYS_TRUSTED);
        			break;
            	case 3: KeyStoreTrustManager.applyTrust(key, 
								TrustValues.OWNERTRUST_ULTIMATE_TRUST);
            		break;
            }
            keyStoreTrustManager.refreshTrust(keyStore);
            keyringHasChanged();
            
            // the trust change affects any signatures made by this key, and 
            // potentially the user bindings that those signatures certify, so
            // the JTree needs to get that information via the tree model ...
            List sigs = keyStore.getCertificationSignatures(key.getLongKeyID());
            for (Iterator it = sigs.iterator(); it.hasNext();) {
            	Signature signature = (Signature)it.next();
            	keyStoreTreeModel.nodeChanged(signature);
            	keyStoreTreeModel.nodeChanged(signature.getParent());
            }
        }
        
        keyPropsDialog.setVisible(false);
    }//GEN-LAST:event_keyPropsOKButtonActionPerformed

    private void subkeyPropsOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subkeyPropsOKButtonActionPerformed
        subkeyPropsDialog.setVisible(false);
    }//GEN-LAST:event_subkeyPropsOKButtonActionPerformed

    private void subkeyPropsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subkeyPropsItemActionPerformed
        Subkey subkey = (Subkey)lastNodeClicked;
        
        // set up the key type and key ID for display
        subkeyPropsAlgorithmField.setText(subkey.getPublicKeyAlgorithmText());
        subkeyPropsKeySizeField.setText(subkey.getKeySize() + " bits");
        subkeyPropsKeyIDField.setText(subkey.getShortKeyID());
        
        // format the date fields for display
        Date creationDate = subkey.getCreationDate();
        subkeyPropsCreDateField.setText(dateFormatter.format(creationDate));
        Date expirationDate = subkey.getExpirationDate();
        if (expirationDate == null) {
            subkeyPropsExpDateField.setText("Never");
        } else {
            subkeyPropsExpDateField.setText(dateFormatter.format(expirationDate));
        }
        
        // set the status message
        if (subkey.isRevoked()) {
            subkeyPropsMessageLabel.setText("This subkey has been revoked");
        } else if (subkey.hasExpired()) {
            subkeyPropsMessageLabel.setText("This subkey has expired");
        } else {
            subkeyPropsMessageLabel.setText("This subkey is current");
        }
        
        // set up the fingerprint field
        subkeyPropsFingerprintField.setText(subkey.getFingerprint());
        
        subkeyPropsDialog.pack();
        centralise(subkeyPropsDialog);
        subkeyPropsDialog.setVisible(true);
    }//GEN-LAST:event_subkeyPropsItemActionPerformed

    private void revokeSubkeyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revokeSubkeyItemActionPerformed
    	Subkey keyToBeRevoked = (Subkey)lastNodeClicked;
        PrimarySigningKey keyToDoRevoking = (PrimarySigningKey)keyToBeRevoked.getParent();
        
        String choice = (String)JOptionPane.showInputDialog(null,
                    "Please choose the reason for subkey revocation:\n",
                    "Choose Reason for Revocation",
                    JOptionPane.PLAIN_MESSAGE,
                    null,  // icon to use
                    keyRevocationReasons,
                    keyRevocationReasons[0]);
        
        debug.Debug.println(1, "Option chosen: '" + choice + "'");
        if (choice != null) {  // an option was chosen, no cancellation
            int reason = 0;
            for (int i = 0; i < keyRevocationReasons.length; ++i) {
                if (choice.equals(keyRevocationReasons[i])) {reason = i; break;}
            }
            
        	PassPhrase passPhrase = requestPassPhrase();
        	
        	if (passPhrase != null) {
            	try {
            		keyToBeRevoked.revoke(keyToDoRevoking, passPhrase, reason);
            		keyringHasChanged();
            	} catch(RevocationException e) {
            		JOptionPane.showMessageDialog(null,
                		    "There was a problem revoking the subkey",
                		    "Key Revocation Failed",
                		    JOptionPane.ERROR_MESSAGE);
            	} catch(KeyMismatchException e) {
            		e.printStackTrace();
            	}
            }
        }
    }//GEN-LAST:event_revokeSubkeyItemActionPerformed

    private void deleteSubkeyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSubkeyItemActionPerformed
        Subkey subkey = (Subkey)lastNodeClicked;
        int response = showDeleteKeyringNodeConfirmation("subkey");
        if (response == JOptionPane.YES_OPTION) {
            keyStoreTreeModel.removeNodeFromParent(subkey);
            keyringHasChanged();
        }
    }//GEN-LAST:event_deleteSubkeyItemActionPerformed

    private void sigPropsOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sigPropsOKButtonActionPerformed
        sigPropsDialog.setVisible(false);
    }//GEN-LAST:event_sigPropsOKButtonActionPerformed

    private void exportPrivateKeyToAscFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPrivateKeyToAscFileItemActionPerformed
    	PrimarySigningKey key = (PrimarySigningKey)lastNodeClicked;
        OpenPGPKeyExporter file = getOutputFile(
                "Save Private Key", "Export OpenPGP Private Key", false);
        if (file != null) {
            try {
            	file.exportPrivateCertificate(key, false);
        	} catch(KeyHandlerException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem exporting the key.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	} catch(IOException e) {
        		JOptionPane.showMessageDialog(null,
						"There was a problem writing to file.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	}
            
        }
    }//GEN-LAST:event_exportPrivateKeyToAscFileItemActionPerformed

    private void revokePrimarySigningKeyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revokePrimarySigningKeyItemActionPerformed
        PrimarySigningKey keyToBeRevoked = (PrimarySigningKey)lastNodeClicked;
        PrimarySigningKey keyToDoRevoking = keyToBeRevoked;
        
        String choice = (String)JOptionPane.showInputDialog(null,
                    "Please choose the reason for key revocation:\n",
                    "Choose Reason for Revocation",
                    JOptionPane.PLAIN_MESSAGE,
                    null,  // icon to use
                    keyRevocationReasons,
                    keyRevocationReasons[0]);
        
        debug.Debug.println(1, "Option chosen: '" + choice + "'");
        if (choice != null) {  // an option was chosen, no cancellation
            int reason = 0;
            for (int i = 0; i < keyRevocationReasons.length; ++i) {
                if (choice.equals(keyRevocationReasons[i])) {reason = i; break;}
            }
            
            PassPhrase passPhrase = requestPassPhrase();
            
            if (passPhrase != null) {
            	try {
            		// revoke the key (downgrading the trust in that key)
            		keyToBeRevoked.revoke(keyToDoRevoking, passPhrase, reason);
            		// refresh the trust across the model
            		keyStoreTrustManager.refreshTrust(keyStore);  
            		// A revoked key has its trust downgraded to 'not trusted'.
            		// The trust change affects any signatures made by this key,
            		// and potentially the user bindings that those signatures 
            		// certify, so the JTree needs to know that the nodes may 
            		// have changed ...
                    List sigs = keyStore.getCertificationSignatures(
                    		keyToBeRevoked.getLongKeyID());
                    for (Iterator it = sigs.iterator(); it.hasNext();) {
                    	Signature signature = (Signature)it.next();
                    	keyStoreTreeModel.nodeChanged(signature);
                    	keyStoreTreeModel.nodeChanged(signature.getParent());
                    }
            		keyringHasChanged();
            	} catch(RevocationException e) {
            		JOptionPane.showMessageDialog(null,
                		    "There was a problem revoking the key",
                		    "Key Revocation Failed",
                		    JOptionPane.ERROR_MESSAGE);
            	} catch(KeyMismatchException e) {
            		e.printStackTrace();
            	}
            }
        }
    }//GEN-LAST:event_revokePrimarySigningKeyItemActionPerformed

    private void revokeSigItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revokeSigItemActionPerformed
        Signature signature = (Signature)lastNodeClicked;
        
        List keys = null;
        try {
        	OpenPGPKeyIDKeyIdentifier id = new OpenPGPKeyIDKeyIdentifier(
            		signature.getRawSigningKeyID());
        	keys = keyStore.findPrimaryKeys(id);
        } catch(KeyHandlerException e) {
        	System.err.println("Error: " + e.getMessage());
        }
        
        if (keys != null && keys.size() == 1) {
        	PrimarySigningKey revokingKey = (PrimarySigningKey)keys.get(0);
            
            String choice = (String)JOptionPane.showInputDialog(null,
                        "Please choose the reason for certification revocation:\n",
                        "Choose Reason for Revocation",
                        JOptionPane.PLAIN_MESSAGE,
                        null,  // icon to use
                        certRevocationReasons,
                        certRevocationReasons[0]);
            
            if (choice != null) {  // an option was chosen, no cancellation
                int reason = 0;
                for (int i = 0; i < certRevocationReasons.length; ++i) {
                    if (choice.equals(certRevocationReasons[i])) {
                    	reason = i; 
                    	break;
                    }
                }
                
                PassPhrase passPhrase = requestPassPhrase();
                
                // if we got a passphrase, try and revoke the signature
                if (passPhrase != null) {
                	try {
                		signature.revoke(revokingKey, passPhrase, reason);
                		keyStoreTreeModel.nodeStructureChanged(
                				signature.getParent());
                		keyringHasChanged();
                		keyStoreTrustManager.refreshTrust(keyStore);
                	} catch(RevocationException e) {
                		JOptionPane.showMessageDialog(null,
                    		    "There was a problem revoking the certification",
                    		    "Certificate Revocation Failed",
                    		    JOptionPane.ERROR_MESSAGE);
                	} catch(KeyMismatchException e) {
                		e.printStackTrace();
                	}
                }
            }
        } else {
        	if (keys == null) {
        		JOptionPane.showMessageDialog(null, "A signing key with key ID " +
            		    signature.getSigningKeyLongID() + " could not be found",
            		    "Certificate Revocation Failed",
            		    JOptionPane.ERROR_MESSAGE);
        	} else {  // (keys.size() > 1)
        		JOptionPane.showMessageDialog(null, keys.size() + " primary " +
        				"signing keys with key ID " + 
        				signature.getSigningKeyLongID() + "\nwere found. " +
        				"There should be one primary signing key per key ID.",
            		    "Certificate Revocation Failed",
            		    JOptionPane.ERROR_MESSAGE);
        	}
        }
        
    }//GEN-LAST:event_revokeSigItemActionPerformed

    /** Method to get the passphrase from the user, or null if the operation 
     * was cancelled. The long-winded way used here is in order to deal with
     * Java bug ID 5018574, this workaround suggested by M. Ziesemer.
     * @see http://forum.java.sun.com/thread.jspa?messageID=9553353
     * @return the passphrase, or null if the operation was cancelled
     */
    private PassPhrase requestPassPhrase() {
        PassPhrase passPhrase = null;
        
        final JPasswordField passwdField = new JPasswordField();
        JOptionPane optPane = new JOptionPane(passwdField, 
                    JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = optPane.createDialog(optPane, "Enter Passphrase");
        dialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent e){
                    passwdField.requestFocusInWindow();
            }
        });
        // show the dialog
        dialog.setVisible(true);
        int result = ((Integer)optPane.getValue()).intValue();
        dialog.dispose();

        if (result == JOptionPane.OK_OPTION) {
            passPhrase = new PassPhrase(
            			new String(passwdField.getPassword()).getBytes());
        }
        return passPhrase;
    }
    
    /** map for the signUserBinding() method to use */
    private Map keyMap = new Hashtable();
    
    private void signUserBindingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUserBindingItemActionPerformed
    	UserID toBeSigned = (UserID)lastNodeClicked;
    	PrimarySigningKey parent = (PrimarySigningKey)toBeSigned.getParent();
    	
    	// Get the keys that can legitimately certify other keys
    	Collection keys = keyStore.getCertificationKeys();
        keyMap.clear();
        for (Iterator it = keys.iterator(); it.hasNext();) {
            PrimarySigningKey pk = (PrimarySigningKey)it.next();
            // add the key to the list if it won't cause a second self-signature
            if (!pk.getLongKeyID().equals(parent.getLongKeyID())) {
            	keyMap.put(pk.getPrimaryEmailAddress(), pk);
            }
        }
        Object[] keyDescriptionArray = keyMap.keySet().toArray();
        // show the combo box dialog, or inform that there are no signing keys
        if (keyDescriptionArray != null && keyDescriptionArray.length > 0) {
        	signingKeyComboBox.setModel(
        			new DefaultComboBoxModel(keyDescriptionArray));
            signingKeyComboBox.setSelectedIndex(0);
            
            sigIsExportableCheckBox.setSelected(true);  // default to exportable
            
            chooseSigningKeyDialog.pack();
            centralise(chooseSigningKeyDialog);
            chooseSigningKeyDialog.setVisible(true);
        } else {
        	JOptionPane.showMessageDialog(null, "No legitimate signing keys" +
        		    " are available", "No Signing Keys Available",
        		    JOptionPane.INFORMATION_MESSAGE);
        }
        
        
    }//GEN-LAST:event_signUserBindingItemActionPerformed
    
    private void exportPublicKeyToAscFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPublicKeyToAscFileItemActionPerformed
    	PrimarySigningKey key = (PrimarySigningKey)lastNodeClicked;
        OpenPGPKeyExporter file = getOutputFile(
                "Save Public Key", "Export OpenPGP Public Key", false);
        if (file != null) {
            try {
            	file.exportPublicCertificate(key, false);
        	} catch(KeyHandlerException e) {
        		JOptionPane.showMessageDialog(this,
						"There was a problem exporting the key.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	} catch(IOException e) {
        		JOptionPane.showMessageDialog(this,
						"There was a problem writing to file.",
						"Key Export Error", JOptionPane.ERROR_MESSAGE);
        	}
        }
    }//GEN-LAST:event_exportPublicKeyToAscFileItemActionPerformed

    private void sigPropsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sigPropsItemActionPerformed
        Signature sig = (Signature)lastNodeClicked;
        
        // set up the key ID, user name and email fields for display
        sigPropsKeyIDField.setText(sig.getSigningKeyShortID());
        try {
            OpenPGPStandardKeyIdentifier ski = 
                    new OpenPGPStandardKeyIdentifier(sig.getSigningUserID());
            sigPropsUserNameField.setText(new String(ski.getName()));
            sigPropsUserEmailField.setText(new String(ski.getEmailAddress()));
        } catch(KeyHandlerException e) {
            sigPropsUserNameField.setText("");
            sigPropsUserEmailField.setText("");
        }
        // Set the displayable signature trust field
        sigPropsSigTrustField.setText(
        		KeyStoreTrustManager.getDisplayableTrust(sig));
        
        // format the date fields for display
        Date creationDate = sig.getCreationDate();
        sigPropsCreDateField.setText(dateFormatter.format(creationDate));
        Date expirationDate = sig.getExpirationDate();
        if (expirationDate == null) {
            sigPropsExpDateField.setText("Never");
        } else {
            sigPropsExpDateField.setText(dateFormatter.format(expirationDate));
        }
        
        // set the status message
        String message = "This signature is valid and current";
        if (sig.isRevoked()) {
            message = "This signature has been revoked";
        } else if (sig.hasExpired()) {
        	message = "This signature has expired";
        } else if (!sig.isVerified()) {
        	if (sig.isMatchedWithUserID()) {
        		message = "This signature is corrupt";
        	} else {
        		message = "This signature cannot be validated without " +
        				"the signing key.";
        	}
        }
        sigPropsMessageLabel.setText(message);
        
        sigPropsExportableField.setText(sig.isExportable()?"Yes":"No");
        
        String trustType = "0 (Normal)";
        if (sig.isTrustSignature()) {
            switch(sig.getTrustSignatureDepth()) {
                case 1:
                    trustType = "1 (Trusted Introducer)";
                    break;
                case 2:
                    trustType = "2 (Meta-Introducer)";
                    break;
                case 0:
                default:
            }
        }
        sigPropsTrustTypeField.setText(trustType);
        
        sigPropsDialog.pack();
        centralise(sigPropsDialog);
        sigPropsDialog.setVisible(true);
    }//GEN-LAST:event_sigPropsItemActionPerformed

    /** Method to ask for comfirmation prior to a delete action */
    private int showDeleteKeyringNodeConfirmation(String nodename) {
        return JOptionPane.showConfirmDialog(null, 
                "The altered keyring will be committed to file when \n" +
                "you click the 'Save Changes and Close' button.\n" +
                "Are you sure you want to delete this " + nodename + "?", 
                "Please Confirm", JOptionPane.YES_NO_OPTION);
    }
    
    private void deleteSigItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSigItemActionPerformed
        Signature sig = (Signature)lastNodeClicked;
        int response = showDeleteKeyringNodeConfirmation("signature");
        if (response == JOptionPane.YES_OPTION) {
            keyStoreTreeModel.removeNodeFromParent(sig);
    		keyStoreTrustManager.refreshTrust(keyStore);
            keyringHasChanged();
        }
    }//GEN-LAST:event_deleteSigItemActionPerformed

    private void deleteUserItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserItemActionPerformed
        UserID uid = (UserID)lastNodeClicked;
        int response = showDeleteKeyringNodeConfirmation("user ID");
        if (response == JOptionPane.YES_OPTION) {
            keyStoreTreeModel.removeNodeFromParent(uid);
            keyringHasChanged();
        }
    }//GEN-LAST:event_deleteUserItemActionPerformed

    private void keyPropsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyPropsItemActionPerformed
        PrimarySigningKey key = (PrimarySigningKey)lastNodeClicked;
        
        // set up the key properties dialog box fields
        setupKeyPropsDialog(key);
        
        //and display the dialog
        keyPropsDialog.pack();
        keyPropsDialog.setVisible(true);
    }//GEN-LAST:event_keyPropsItemActionPerformed

    /** Method to set up the key properties dialog */
    private void setupKeyPropsDialog(PrimarySigningKey key) {
        // set up the key type and key ID for display
        keyPropsAlgorithmField.setText(key.getPublicKeyAlgorithmText());
        keyPropsKeySizeField.setText(key.getKeySize() + " bits");
        keyPropsKeyIDField.setText(key.getShortKeyID());
        
        // set up the owner trust combo box
        keyPropsOwnerTrustComboBox.setModel(
                new DefaultComboBoxModel(ownerTrustValues));
        keyPropsOwnerTrustComboBox.setSelectedItem(
                KeyStoreTrustManager.getDisplayableTrust(key));
        keyPropsOwnerTrustComboBox.setEnabled(true);
        
        // format the date fields for display
        Date creationDate = key.getCreationDate();
        keyPropsCreDateField.setText(dateFormatter.format(creationDate));
        Date expirationDate = key.getExpirationDate();
        if (expirationDate == null) {
            keyPropsExpDateField.setText("Never");
        } else {
            keyPropsExpDateField.setText(dateFormatter.format(expirationDate));
        }
        
        // set up the status message
        if (key.isRevoked()) {
            keyPropsKeyStatusField.setText("This key has been revoked");
        } else if (key.hasExpired()) {
            keyPropsKeyStatusField.setText("This key has expired");
        } else {
            keyPropsKeyStatusField.setText("This key is current");
        }
        
        // set up the fingerprint field
        keyPropsFingerprintField.setText(key.getFingerprint());
        
        // set up the preference checkboxes
        clearPreferences();
        UserID puid = key.getPrimaryUserID();
        if (puid != null) {
        	Signature sig = puid.getSelfSignature();
        	if (sig != null) {
        		setPreferences(sig);
        	}
        }
    }
    
    /** Method to clear the primary key preferences prior to setting them */
    private void clearPreferences() {
    	// clear the cipher checkboxes
    	keyPropsCipherPrefs1.setSelected(false);
    	keyPropsCipherPrefs2.setSelected(false);
    	keyPropsCipherPrefs3.setSelected(false);
    	keyPropsCipherPrefs4.setSelected(false);
    	keyPropsCipherPrefs7.setSelected(false);
    	keyPropsCipherPrefs8.setSelected(false);
    	keyPropsCipherPrefs9.setSelected(false);
    	keyPropsCipherPrefs10.setSelected(false);
    	
    	// clear the digest checkboxes
    	keyPropsHashPrefs1.setSelected(false);
    	keyPropsHashPrefs2.setSelected(false);
    	keyPropsHashPrefs3.setSelected(false);
    	keyPropsHashPrefs8.setSelected(false);
    	keyPropsHashPrefs9.setSelected(false);
    	keyPropsHashPrefs10.setSelected(false);
    	keyPropsHashPrefs11.setSelected(false);
    	
    	// clear the compression checkboxes
    	keyPropsCompressPrefs0.setSelected(false);
    	keyPropsCompressPrefs1.setSelected(false);
    	keyPropsCompressPrefs2.setSelected(false);
    	keyPropsCompressPrefs3.setSelected(false);
    }
    
    /** Method to set the primary key preferences according to the 
     * self-signature passed in as an argument.
     * @param sig The self signature, this should contain subpackets denoting
     * the primary key preferences
     */
    private void setPreferences(Signature sig) {
    	byte[] ciphers = sig.getPreferredSymmetricAlgorithms();
		byte[] digests = sig.getPreferredHashAlgorithms();
		byte[] compression = sig.getPreferredCompressionAlgorithms();
		// set the preferred cipher checkboxes
		if (ciphers != null) {
			for (int i = 0; i < ciphers.length; ++i) {
				switch (ciphers[i]) {
					case 1: keyPropsCipherPrefs1.setSelected(true); break;
					case 2: keyPropsCipherPrefs2.setSelected(true); break;
					case 3: keyPropsCipherPrefs3.setSelected(true); break;
					case 4: keyPropsCipherPrefs4.setSelected(true); break;
					case 7: keyPropsCipherPrefs7.setSelected(true); break;
					case 8: keyPropsCipherPrefs8.setSelected(true); break;
					case 9: keyPropsCipherPrefs9.setSelected(true); break;
					case 10: keyPropsCipherPrefs10.setSelected(true); break;
				}
			}
		}
		// set the preferred digest checkboxes
		if (digests != null) {
			for (int i = 0; i < digests.length; ++i) {
				switch (digests[i]) {
					case 1: keyPropsHashPrefs1.setSelected(true); break;
					case 2: keyPropsHashPrefs2.setSelected(true); break;
					case 3: keyPropsHashPrefs3.setSelected(true); break;
					case 8: keyPropsHashPrefs8.setSelected(true); break;
					case 9: keyPropsHashPrefs9.setSelected(true); break;
					case 10: keyPropsHashPrefs10.setSelected(true); break;
					case 11: keyPropsHashPrefs11.setSelected(true); break;
				}
			}
		}
		// set the preferred compression checkboxes
		if (compression != null) {
			for (int i = 0; i < compression.length; ++i) {
				switch (compression[i]) {
					case 0: keyPropsCompressPrefs0.setSelected(true); break;
					case 1: keyPropsCompressPrefs1.setSelected(true); break;
					case 2: keyPropsCompressPrefs2.setSelected(true); break;
					case 3: keyPropsCompressPrefs3.setSelected(true); break;
				}
			}
		}
    }
    
    private void deleteKeyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteKeyItemActionPerformed
        PrimarySigningKey key = (PrimarySigningKey)lastNodeClicked;
        int response = showDeleteKeyringNodeConfirmation("key");
        if (response == JOptionPane.YES_OPTION) {
        	// refresh the trust as 'not trusted' before removing it
        	KeyStoreTrustManager.applyClearTrust(key, true);
        	keyStoreTrustManager.refreshTrust(keyStore);
        	keyStoreTreeModel.removeNodeFromParent(key);
            keyringHasChanged();
        }
    }//GEN-LAST:event_deleteKeyItemActionPerformed

    // for the popup menu's benefit, to allow access to the popup target object
    private TreeNode lastNodeClicked;
    
    private void keyringTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyringTreeMouseReleased
        if (evt.isPopupTrigger()) {  // only interested in popup menus
        	handleKeyringPopupTrigger(evt);
        }
    }//GEN-LAST:event_keyringTreeMouseReleased
    
    private void keyringTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyringTreeMousePressed
        if (evt.isPopupTrigger()) {  // only interested in popup menus
        	handleKeyringPopupTrigger(evt);
        }
    }//GEN-LAST:event_keyringTreeMousePressed

    /** a common method to handle the keyring popup menu event - this can be
     * called from two different methods because different OSes treat popup
     * actions differently (e.g. Windows, MacOS)
     */
    private void handleKeyringPopupTrigger(java.awt.event.MouseEvent evt) {
    	TreePath path = keyringTree.getPathForLocation(evt.getX(), evt.getY());
        keyringTree.setSelectionPath(path);
        try { 
            lastNodeClicked = (TreeNode)path.getLastPathComponent(); 
        } catch (Exception e){}
        // show the popup
        if (lastNodeClicked instanceof PrimarySigningKey) { // key popup
        	setupPopupMenu((PrimarySigningKey)lastNodeClicked);
            keyPopupMenu.show(
                    (Component)evt.getSource(), evt.getX(), evt.getY());
        } else if (lastNodeClicked instanceof Subkey) { // key popup
        	setupPopupMenu((Subkey)lastNodeClicked);
            subkeyPopupMenu.show(
                    (Component)evt.getSource(), evt.getX(), evt.getY());
        } else if (lastNodeClicked instanceof UserID) { // user popup
        	setupPopupMenu((UserID)lastNodeClicked);
            userPopupMenu.show(
                    (Component)evt.getSource(), evt.getX(), evt.getY());
        } else if (lastNodeClicked instanceof Signature) { // signature popup
        	setupPopupMenu((Signature)lastNodeClicked);
            sigPopupMenu.show(
                    (Component)evt.getSource(), evt.getX(), evt.getY());
        } else if (lastNodeClicked instanceof KeyStore) { // keyring popup
        	setupPopupMenu((KeyStore)lastNodeClicked);
            keyringPopupMenu.show(
                    (Component)evt.getSource(), evt.getX(), evt.getY());
        }
    }
    
    private void setupPopupMenu(UserID userID) {
        // disable delete option if this user binding is the only (primary) one
        if (userID.isSoleUserID()) {
        	deleteUserItem.setEnabled(false);
        } else {
        	// only allow deletion if the key belongs to the user
        	PrimarySigningKey psk = (PrimarySigningKey)userID.getParent();
        	if (psk.hasPrivateKeyPart()) {
        		deleteUserItem.setEnabled(true);
        	} else {
        		deleteUserItem.setEnabled(false);
        	}
        }
        // only allow signing of the user binding if self-signature is current,
        // the key to which the user binding is bound has not expired, and there
        // is at least one signing key ...
        if (userID.isSelfSignatureRevoked())
            signUserBindingItem.setEnabled(false);
        else {
        	PrimarySigningKey primaryKey = (PrimarySigningKey)userID.getParent();
        	if (primaryKey.hasExpired() || primaryKey.isRevoked()) {
        		signUserBindingItem.setEnabled(false);
        	} else {
        		// only activate the 'Sign' menu item if there's a signing key
        		Collection keys = keyStore.getCertificationKeys();
        		boolean signingKeyAvailable = false;
        		for (Iterator it = keys.iterator(); it.hasNext();) {
                    PrimarySigningKey pk = (PrimarySigningKey)it.next();
                    // find out whether there are appropriate signing keys
                    if (!pk.getLongKeyID().equals(primaryKey.getLongKeyID())) {
                    	signingKeyAvailable = true;
                    	break;
                    }
                }
        		signUserBindingItem.setEnabled(signingKeyAvailable);
        	}
        }
    }
    
    private void setupPopupMenu(PrimarySigningKey key) {
        // only enable the private key export menu if certificate has private key
        if (key.hasPrivateKeyPart()) {
            privateKeyExportMenu.setEnabled(true);
            // only allow revocation for a key that is neither expired nor revoked
            if (key.isRevoked() || key.hasExpired()) {
                revokePrimarySigningKeyItem.setEnabled(false);
                addEmailAddressItem.setEnabled(false);
                addSubkeyItem.setEnabled(false);
            } else {
                revokePrimarySigningKeyItem.setEnabled(true);
                addEmailAddressItem.setEnabled(true);
                addSubkeyItem.setEnabled(true);
            }
        } else {
            privateKeyExportMenu.setEnabled(false);
            revokePrimarySigningKeyItem.setEnabled(false);
            addEmailAddressItem.setEnabled(false);
            addSubkeyItem.setEnabled(false);
        }
        KeySourceListModel publicList = 
                (KeySourceListModel)publicKeySourcesList.getModel();
        if (publicList.getSize() > 0) {
            exportPublicKeyToKeyServerItem.setEnabled(true);
    	} else {
            exportPublicKeyToKeyServerItem.setEnabled(false);
        }
    }
    
    private void setupPopupMenu(Subkey subkey) {
        // only allow revocation for a key that is neither expired nor revoked
        if (subkey.hasPrivateKeyPart()) {
            if (subkey.isRevoked() || subkey.hasExpired())
                revokeSubkeyItem.setEnabled(false);
            else
                revokeSubkeyItem.setEnabled(true);
            // allow subkey deletion only if this is one of the user's keys
            deleteSubkeyItem.setEnabled(true);
        } else {
            deleteSubkeyItem.setEnabled(false);
            revokeSubkeyItem.setEnabled(false);
        }
    }
    
    private void setupPopupMenu(Signature signature) {
    	// try and find the signing key
    	List keyList = null;
    	try {
			OpenPGPKeyIDKeyIdentifier id = 
					new OpenPGPKeyIDKeyIdentifier(signature.getRawSigningKeyID());
			keyList = keyStore.findPrimaryKeys(id);
		} catch(KeyHandlerException e) {
			e.printStackTrace();
		}
		
		// enable the revoke menu option if private signing key is on keyrings
		boolean revocable = false;  // explicit set - IDE complains otherwise
    	if (!signature.isRevoked() && signature.isRevocable()) {
        	if (keyList != null && !keyList.isEmpty()) {
				PrimarySigningKey psk = (PrimarySigningKey)keyList.get(0);
				if (psk.hasPrivateKeyPart()) revocable = true;
			}
        }
    	revokeSigItem.setEnabled(revocable);
    	
    	// self-signatures cannot be deleted - they should be revoked instead
    	boolean deletable = false;  // explicit set - IDE complains otherwise
    	if (!signature.isSelfSignature()) {
    		// if signing key belongs to the user, allow deletion of signature
			if (keyList != null && !keyList.isEmpty()) {
				PrimarySigningKey psk = (PrimarySigningKey)keyList.get(0);
				if (psk.hasPrivateKeyPart()) deletable = true;
			}
    		
    		// if user doesn't own signing key, he/she should still be allowed
    		// to delete any non-self-signatures from his/her own keys
    		if (!deletable) {
    			PrimarySigningKey psk = 
    				(PrimarySigningKey)signature.getParent().getParent();
    			if (psk.hasPrivateKeyPart()) deletable = true;
    		}
    	}
    	deleteSigItem.setEnabled(deletable);
    }
    
    private void setupPopupMenu(KeyStore keys) {
        // no change - all options enabled (this is a placeholder)
    	// TODO: blank out the keyring export menus if there are no keys in the keyring
    }
    
    private void setupPopupMenu(UserAttribute userAttribute) {
        // no change - all options enabled (this is a placeholder)
    	// TODO: allow deletion if signing key belongs to the user, and
    	// allow signing of the user binding if self-signature is current,
        // the key to which the user binding is bound has not expired, and there
        // is at least one signing key ...
    }
    
    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        //TODO:  we're currently throwing away the window - we may not need to
        setVisible(false);
        dispose();
    }//GEN-LAST:event_windowClosing

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        if (secretKeySourcesList.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)secretKeySourcesList.getModel();

            lm.demote(secretKeySourcesList.getSelectedIndex()); 
            if (secretKeySourcesList.getSelectedIndex()+1<lm.getSize())
                secretKeySourcesList.setSelectedIndex(secretKeySourcesList.getSelectedIndex()+1);
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        if (secretKeySourcesList.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)secretKeySourcesList.getModel();

            lm.promote(secretKeySourcesList.getSelectedIndex()); 
            secretKeySourcesList.setSelectedIndex(secretKeySourcesList.getSelectedIndex()-1);
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        if (publicKeySourcesList.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)publicKeySourcesList.getModel();

            lm.demote(publicKeySourcesList.getSelectedIndex()); 
            if (publicKeySourcesList.getSelectedIndex()+1<lm.getSize())
                publicKeySourcesList.setSelectedIndex(publicKeySourcesList.getSelectedIndex()+1);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if (publicKeySourcesList.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)publicKeySourcesList.getModel();

            lm.promote(publicKeySourcesList.getSelectedIndex()); 
            publicKeySourcesList.setSelectedIndex(publicKeySourcesList.getSelectedIndex()-1);
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        if (secretKeySourcesList.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)secretKeySourcesList.getModel();

            lm.remove(secretKeySourcesList.getSelectedIndex()); 
            loadKeySearchComponents();  // keep key search combo box up-to-date
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if (secretKeySourcesList.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)secretKeySourcesList.getModel();

            EditKeySource editsource = new EditKeySource(new javax.swing.JFrame(), true, (KeyHandler)lm.getElementAt(secretKeySourcesList.getSelectedIndex()));
            editsource.setVisible(true);
            lm.set(secretKeySourcesList.getSelectedIndex(), editsource.getReturnValue());
            loadKeySearchComponents();  // keep key search combo box up-to-date
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        KeySourceListModel lm = (KeySourceListModel)secretKeySourcesList.getModel();

        AddKeySource addsource = new AddKeySource(new javax.swing.JFrame(), true, "/core/keyhandlers/openpgp_secret_sources.lst");
        addsource.setVisible(true);

        if (addsource.getReturnValue()!=null) {
            lm.add(addsource.getReturnValue());
            loadKeySearchComponents();  // keep key search combo box up-to-date
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (publicKeySourcesList.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)publicKeySourcesList.getModel();

            lm.remove(publicKeySourcesList.getSelectedIndex()); 
            loadKeySearchComponents();  // keep key search combo box up-to-date
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (publicKeySourcesList.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)publicKeySourcesList.getModel();

            EditKeySource editsource = new EditKeySource(new javax.swing.JFrame(), true, (KeyHandler)lm.getElementAt(publicKeySourcesList.getSelectedIndex()));
            editsource.setVisible(true);
            lm.set(publicKeySourcesList.getSelectedIndex(), editsource.getReturnValue());
            loadKeySearchComponents();  // keep key search combo box up-to-date
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        KeySourceListModel lm = (KeySourceListModel)publicKeySourcesList.getModel();
        AddKeySource addsource = new AddKeySource(new javax.swing.JFrame(), true, "/core/keyhandlers/openpgp_public_sources.lst");
        addsource.setVisible(true);

        if (addsource.getReturnValue()!=null) {
            lm.add(addsource.getReturnValue());
            loadKeySearchComponents();  // keep key search combo box up-to-date
        }
    }//GEN-LAST:event_jButton6ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // primary key sources (escape the backslash for windows!)
        String secringFilename = jTextField1.getText();
        String pubringFilename = jTextField2.getText();
        File secring = new File(secringFilename);
        File pubring = new File(pubringFilename);
        boolean secringPathChangedToExistingFile = 
        		(!secringFilename.equals(secPathCached) && secring.exists());
        boolean secringIsNew = !secring.exists();
        boolean pubringPathChangedToExistingFile = 
        		(!pubringFilename.equals(pubPathCached) && pubring.exists());
        boolean pubringIsNew = !pubring.exists();
        
        // this should be an atomic operation, do both files or none - this 
        // prevents the public keyring and secret keyring from getting out of
        // step with each other
        boolean allOK = true;
        
        // createNewFile() creates a file if and only if the file does not exist
        try {secring.createNewFile();} catch (Exception e) {}
        try {pubring.createNewFile();} catch (Exception e) {}
        
        // if createNewFile() failed a message dialog will be shown here
        if (!secring.canWrite() || secring.isDirectory()) {
        	JOptionPane.showMessageDialog(null,
					"Cannot write to secret keyring.\n" +
					"No secret keyring file will be written.",
					"Secret Keyring Error", JOptionPane.ERROR_MESSAGE);
        	allOK = false;
        }
        
        String secPath = "";
        if (allOK) {  // write out secret keyring path if it's a valid file spec
            secPath = StringHelper.escapeWinPath(secringFilename);
        } else {  // or revert to the original path if it's not valid
        	secPath = StringHelper.escapeWinPath(secPathCached);
        }
        configurationData.setSetting(
        		"keymanager.openpgp.primary.secring", secPath);
        
        // if createNewFile() failed a message dialog will be shown here
        if (!pubring.canWrite() || pubring.isDirectory()) {
        	JOptionPane.showMessageDialog(null,
					"Cannot write to public keyring.\n" +
					"No public keyring file will be written.",
					"Public Keyring Error", JOptionPane.ERROR_MESSAGE);
        	allOK = false;
        }
        
        String pubPath = "";
        if (allOK) {  // write out public keyring path if it's a valid file spec
            pubPath = StringHelper.escapeWinPath(pubringFilename);
        } else {
        	pubPath = StringHelper.escapeWinPath(pubPathCached);
        }
        configurationData.setSetting(
        		"keymanager.openpgp.primary.pubring", pubPath);
        
        // SAVE KEYSOURCE LISTS - delete existing, set new

        int n = 1;
        while (configurationData.getSetting("keymanager.openpgp.publiclist."+n+".type", "").compareTo("")!=0) {
            configurationData.setSetting("keymanager.openpgp.publiclist."+n+".type", "");
            configurationData.setSetting("keymanager.openpgp.publiclist."+n+".filename", "");
            configurationData.setSetting("keymanager.openpgp.publiclist."+n+".serverport", "");
            configurationData.setSetting("keymanager.openpgp.publiclist."+n+".serveraddress", "");
            n++;
        }
        
        n = 1;
        while (configurationData.getSetting("keymanager.openpgp.secretlist."+n+".type", "").compareTo("")!=0) {
            configurationData.setSetting("keymanager.openpgp.secretlist."+n+".type", "");
            configurationData.setSetting("keymanager.openpgp.secretlist."+n+".filename", "");
            configurationData.setSetting("keymanager.openpgp.secretlist."+n+".serverport", "");
            configurationData.setSetting("keymanager.openpgp.secretlist."+n+".serveraddress", "");
            n++;
        }
        
        // extract public & private sources
        KeySourceListModel publiclist = 
                (KeySourceListModel)publicKeySourcesList.getModel();
        KeySourceListModel secretlist = 
                (KeySourceListModel)secretKeySourcesList.getModel();
        
        // process on type
        for (n = 0; n < publiclist.getSize(); n++) {
            String type = publiclist.getElementAt(n).getClass().getName();
            configurationData.setSetting("keymanager.openpgp.publiclist."+(n+1)+".type", type); 
            
            if (publiclist.getElementAt(n) instanceof KeyServer) {
                KeyServer ks = (KeyServer)publiclist.getElementAt(n);
                configurationData.setSetting("keymanager.openpgp.publiclist."+(n+1)+".serveraddress", ks.getServerAddress());
                configurationData.setSetting("keymanager.openpgp.publiclist."+(n+1)+".serverport", Integer.toString(ks.getServerPort()));
            } else if (publiclist.getElementAt(n) instanceof KeyFile) {
                KeyFile ks = (KeyFile)publiclist.getElementAt(n);
                configurationData.setSetting("keymanager.openpgp.publiclist."+(n+1)+".filename", StringHelper.escapeWinPath(ks.getFileName()));
            } else {
                System.err.println("Unrecognised key handler type.");
            }
        }
        
        for (n = 0; n < secretlist.getSize(); n++) {
            String type = secretlist.getElementAt(n).getClass().getName();
            configurationData.setSetting("keymanager.openpgp.secretlist."+(n+1)+".type", type); 
            
            if (secretlist.getElementAt(n) instanceof KeyServer) {
                KeyServer ks = (KeyServer)secretlist.getElementAt(n);
                configurationData.setSetting("keymanager.openpgp.secretlist."+(n+1)+".serveraddress", ks.getServerAddress());
                configurationData.setSetting("keymanager.openpgp.secretlist."+(n+1)+".serverport", Integer.toString(ks.getServerPort()));
            } else if (secretlist.getElementAt(n) instanceof KeyFile) {
                KeyFile ks = (KeyFile)secretlist.getElementAt(n);
                configurationData.setSetting("keymanager.openpgp.secretlist."+(n+1)+".filename", StringHelper.escapeWinPath(ks.getFileName()));
            } else {
                System.err.println("Unrecognised key handler type.");
            }
        }
            
        // Save the settings
        try {
            configurationData.saveConfig();
        } catch (IOException e) {
            System.err.println("Error saving configuration : " + e.getMessage());
        }
        
        // Save the keyrings if they can be written to
        
        boolean secringWasWritten = false, pubringWasWritten = false;
        if (allOK && (keyStoreHasChanged || secringIsNew)) {
	        // try to write the secret keyring
        	boolean isWriteApproved = true;
        	if (secringPathChangedToExistingFile) {
        		int retval = JOptionPane.showConfirmDialog(null,
        				"The Secret Keyring file path has changed to point to" +
    					"an existing file.\nThis will overwrite all existing " +
    					"data on the existing file. OK?",
    					"Keyring Write Alert", JOptionPane.YES_NO_OPTION);
        		if (retval == JOptionPane.NO_OPTION) {
        			isWriteApproved = false;
        			allOK = false;  // prevent keyring mismatch by writing neither
        		}
        	}
        	if (isWriteApproved) {
        		try {
    		        OpenPGPKeyExporter exportFile = 
    		        	new OpenPGPBinaryKeyFile(secring, keyParser);
    		        exportFile.exportPrivateKeyring(keyStore);
    		        secringWasWritten = true;
    		        System.err.println("Wrote secret keyring to " + secringFilename);
    	        } catch(Exception e) {
    	        	e.printStackTrace();
    	        	System.err.println("There was a problem writing secret " +
    	        			"keyring '" + secringFilename + "'. Error: " + 
    	        			e.getMessage());
    	        	JOptionPane.showMessageDialog(null,
    						"There was a problem writing the secret keyring.\n" +
    						"The public keyring file will not be written out.",
    						"Keyring Write Error", JOptionPane.ERROR_MESSAGE);
    	        	allOK = false;
    	        }
        	}
        }
        
        if (allOK && secringWasWritten && (keyStoreHasChanged || pubringIsNew)) {
        	// If we reach this point, the secret keyring was written out.
            // Try to write the public keyring 
        	boolean isWriteApproved = true;
        	if (pubringPathChangedToExistingFile) {
        		int retval = JOptionPane.showConfirmDialog(null,
    					"The Public Keyring file path has changed to point to" +
    					"an existing file.\nThis will overwrite all existing " +
    					"data on the existing file. OK?\n" +
    					"(WARNING: Choosing 'No' could result in mismatched keyrings)",
    					"Keyring Write Alert", JOptionPane.YES_NO_OPTION);
        		if (retval == JOptionPane.NO_OPTION) isWriteApproved = false;
        	}
        	if (isWriteApproved) {
        		try {
        	        OpenPGPKeyExporter exportFile = 
        	        		new OpenPGPBinaryKeyFile(pubring, keyParser);
        	        exportFile.exportPublicKeyring(keyStore);
        	        pubringWasWritten = true;
        	        System.err.println("Wrote public keyring to " + 
        	        		pubringFilename);
                } catch(Exception e) {
                	e.printStackTrace();
                	System.err.println("A problem occurred writing the public " +
    	        			"keyring '" + pubringFilename + "'. Error: " + 
    	        			e.getMessage());
                	JOptionPane.showMessageDialog(null,
        					"There was a problem writing the public keyring.\n" +
        					"No further keyring files will be written out.",
        					"Keyring Write Error", JOptionPane.ERROR_MESSAGE);
                	allOK = false;
                }
        	}
        }
        // oops! keyrings may be messed up ...
        if (pubringWasWritten ^ secringWasWritten) {
        	JOptionPane.showMessageDialog(null,
					"The public and private keyring files may be mismatched." +
					"\nManual intervention may be required.",
					"Keyring Write Error", JOptionPane.ERROR_MESSAGE);
        }
        // print a 'no change' message if there were no changes
        if (!pubringWasWritten && !secringWasWritten) {
        	if (!keyStoreHasChanged) {
        		System.err.println("Keyring unchanged, no files were written");
        	}
        }
        // close window
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // close window
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /** Method to return the symmetric algorithms currently selected in the
     * keypair generation dialog box.
     * @return array of bytes, each representing a symmetric algorithm
     */
    private byte[] getSymmetricAlgorithmPrefs() throws AlgorithmException {
        byte[] symCipherPrefs = new byte[8];
        int count = 0;
        // add the preferred symmetric algorithms in descending strength order
        if (genKeyCipherPrefs_TWOFISH.isSelected()) 
            symCipherPrefs[count++] = SymmetricAlgorithmSettings.TWOFISH;
        if (genKeyCipherPrefs_AES256.isSelected()) 
            symCipherPrefs[count++] = SymmetricAlgorithmSettings.AES256;
        if (genKeyCipherPrefs_AES192.isSelected()) 
            symCipherPrefs[count++] = SymmetricAlgorithmSettings.AES192;
        if (genKeyCipherPrefs_AES128.isSelected()) 
            symCipherPrefs[count++] = SymmetricAlgorithmSettings.AES128;
        if (genKeyCipherPrefs_BLOWFISH.isSelected()) 
            symCipherPrefs[count++] = SymmetricAlgorithmSettings.BLOWFISH;
        if (genKeyCipherPrefs_CAST5.isSelected()) 
            symCipherPrefs[count++] = SymmetricAlgorithmSettings.CAST5;
        if (genKeyCipherPrefs_TRIPLEDES.isSelected()) 
            symCipherPrefs[count++] = SymmetricAlgorithmSettings.TRIPLEDES;
        if (genKeyCipherPrefs_IDEA.isSelected()) 
            symCipherPrefs[count++] = SymmetricAlgorithmSettings.IDEA;
        // if 3DES is not in the list it is good form to add it at the end
        // of the list (see RFC2440, section 12.1)
        if (!genKeyCipherPrefs_TRIPLEDES.isSelected())
        	symCipherPrefs[count++] = SymmetricAlgorithmSettings.TRIPLEDES;
        // set the default first, followed by the others in order
        byte[] tmp = new byte[count];
        int defaultAlg = SymmetricAlgorithmSettings.getCipherCode(
        		(String)defaultSymAlgComboBox.getSelectedItem());
        tmp[0] = (byte)defaultAlg;
        for (int i = 1, j = 0; j < count; j++) {
            if (symCipherPrefs[j] != defaultAlg) {
                tmp[i++] = symCipherPrefs[j];
            }
        }
        symCipherPrefs = tmp;
        return symCipherPrefs;
    }
    
    private void generateKey() {
        try {
            // validate form
            String pass1 = new String(jPasswordField1.getPassword());
            String pass2 = new String(jPasswordField2.getPassword());
            String name = jTextField3.getText();
            String address = jTextField4.getText();
            String pubfile = jTextField2.getText();
            String secfile = jTextField1.getText();
           
            String signingAlg = (String)primaryKeyAlgorithmComboBox.getSelectedItem();
            int signingKeySizeIndex = primaryKeySizeComboBox.getSelectedIndex();
            String encryptAlg = (String)subkeyAlgorithmComboBox.getSelectedItem();
            int subkeySizeIndex = subkeySizeComboBox.getSelectedIndex();
            String symAlg = configurationData.getSetting(
            		"openpgp.symmetricalgorithm.used","IDEA");
           
            int symmetricAlgorithm = 0;
            int pkAlgorithm = 0;
            int dsAlgorithm = 0;
            int signingKeySize = 0;
            int subkeySize = 0;

            // validate filenames
            if ( (pubfile.length()==0) || (secfile.length()==0) ) {
                javax.swing.JOptionPane.showMessageDialog(null, "Key file " +
                		"has not been specified!", "Problem", 
                		javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
           
            // validate name and address
            if (name.length()==0) {
                javax.swing.JOptionPane.showMessageDialog(null, "Key file " +
                		"has not been specified!", "Problem", 
                		javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (address.length()==0) {
                javax.swing.JOptionPane.showMessageDialog(null, "Address " +
                		"field is blank", "Problem", 
                		javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (pass1.length()<8) {
                javax.swing.JOptionPane.showMessageDialog(null, "Passphrase " +
                		"must be at least 8 characters long!", "Problem", 
                		javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (pass1.compareTo(pass2)!=0) {
                javax.swing.JOptionPane.showMessageDialog(null, "Passphrases " +
                		"do not match!", "Problem", 
                		javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // work out symmetric algorithm
            try {
            	symmetricAlgorithm = 
            			SymmetricAlgorithmSettings.getCipherCode(symAlg);
            } catch (AlgorithmException e) {
            	System.err.println("Symmetric algorithm '" + symAlg + 
            			"' is not supported.");
            	return;
            }
            
            // work out the symmetric algorithm preferences
            byte[] symAlgPrefs = null;
            try {
                symAlgPrefs = getSymmetricAlgorithmPrefs();
            } catch (AlgorithmException e) {  // display error dialog
            	e.printStackTrace();
            } finally {
                if (symAlgPrefs == null) {
                    javax.swing.JOptionPane.showMessageDialog(null, "At " +
                    		"least one supported symmetric algorithm must " +
                    		"be selected!", "Problem", 
                    		javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            
            // work out subkey size
            switch (subkeySizeIndex) {
	        	case 0: subkeySize = 1024; break;
	        	case 1: subkeySize = 2048; break;
	        	case 2: subkeySize = 4096; break;
	        }
            
            // work out pk algorithm
            if ("RSA".compareToIgnoreCase(encryptAlg)==0) {
                pkAlgorithm = PublicKeyAlgorithmSettings.RSA_ENCRYPTSIGN;
            } else if ("El Gamal".compareToIgnoreCase(encryptAlg)==0) {
                pkAlgorithm = PublicKeyAlgorithmSettings.ELGAMAL_ENCRYPT;
            } else {
                System.err.println("Encryption algorithm '" + encryptAlg + 
                		"' is not supported.");
                return;
            }
            
            // work out signing key size
            switch (signingKeySizeIndex) {
            	case 0: signingKeySize = 1024; break;
            	case 1: signingKeySize = 2048; break;
            	case 2: signingKeySize = 4096; break;
            }
           
            // work out dsa algorithm
            if ("RSA".compareToIgnoreCase(signingAlg)==0) {
                dsAlgorithm = PublicKeyAlgorithmSettings.RSA_ENCRYPTSIGN;
            } else if ("DSA".compareToIgnoreCase(signingAlg)==0) {
                dsAlgorithm = PublicKeyAlgorithmSettings.DSA;
            } else {
                System.err.println("Signature algorithm '" + signingAlg + 
                		"' is not supported.");
                return;
            }
            
            // key files to use
            OpenPGPPublicKeyTrap publicCache = new OpenPGPPublicKeyTrap(
					keyParser, keyStore);
			KeyHandler secretCache = publicCache.getSecretKeyTrap();
			keyStore.addObserver(this);  // keyring sends update when key added
            
            KeyGenStatusDlg status = new KeyGenStatusDlg(
            		new javax.swing.JFrame(), false);
            
            // prepare the fixed self signature preferences
            byte[] hashPrefs = {8,9,10,2};  // opt for SHA digests
            byte[] compressPrefs = {1,2,0};  // proxy cannot handle bzip2
            
            status.generateOpenPGPKey(publicCache, secretCache,
                        symmetricAlgorithm, dsAlgorithm, signingKeySize,
                        pkAlgorithm, subkeySize, symAlgPrefs, hashPrefs, 
                        compressPrefs, name.getBytes(), address.getBytes(),
                        pass1.getBytes());

        } catch (Exception e) {
            System.err.println(e.getMessage());
            javax.swing.JOptionPane.showMessageDialog(null, 
            		e.getMessage(), "Problem", 
            		javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void generateKeyPairOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeyPairOKButtonActionPerformed
        generateKey();
        generateKeypairDialog.setVisible(false);
    }//GEN-LAST:event_generateKeyPairOKButtonActionPerformed

    private void generateNewKeypairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNewKeypairButtonActionPerformed
        populateDefaultSymAlgComboBox();
        generateKeypairDialog.pack();
        centralise(generateKeypairDialog);
        generateKeypairDialog.setVisible(true);
    }//GEN-LAST:event_generateNewKeypairButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // secret key browse
        JFileChooser chooser = new JFileChooser();
        
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileHidingEnabled(true);
        chooser.setMultiSelectionEnabled(false);
        
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
           jTextField1.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // public key browse
        JFileChooser chooser = new JFileChooser();

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileHidingEnabled(true);
        chooser.setMultiSelectionEnabled(false);

        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
           jTextField2.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    
    /** Internal method to populate the combo boxes with data. */
    private String[] populateComboBox(String setting, String def) {
        Vector v = new Vector();
        
        StringTokenizer st = new StringTokenizer(configurationData.getSetting(setting, def),",\r\n");
        
        while (st.hasMoreTokens()) {
            v.add(st.nextToken());
        }

        String items[] = new String[v.size()];
        for (int n = 0; n<items.length; n++)
            items[n] = (String)v.get(n);
        
        return items;
    }
    
    /** <p>Internal method to populate the secret & public key list boxes with data.</p> */
    private KeyHandler [] populateKeySourceList(String prefix) {
        try {          
            KeyHandler [] tmp = KeyHandler.loadKeysourceList(configurationData, prefix);
            
            if (tmp!=null) {         
                return tmp;
            } else {
                return null;
            }
            
        } catch (Exception e) {
            System.err.println(e.getMessage()); 
            return null;
        }
    }
    
//    private TreeModel getKeyringModel() {
//        String pubfile = configurationData.getSetting("keymanager.openpgp.primary.pubring", "pubring.pgp");
//        String secfile = configurationData.getSetting("keymanager.openpgp.primary.secring", "secring.pgp");
//        TreeModel model = null;
//        try {
//            model = new DefaultTreeModel(keyringManager.getKeyring(pubfile, secfile));
//        } catch (keyring.exceptions.KeyringStructureException e) {}
//        return model;
//    }
    
    /** method to load the key store tree model */
    private void loadKeyStoreModel() {
        String pubfile = configurationData.getSetting("keymanager.openpgp.primary.pubring", "pubring.pgp");
        String secfile = configurationData.getSetting("keymanager.openpgp.primary.secring", "secring.pgp");
        pubPathCached = pubfile;
        secPathCached = secfile;
        try {
            keyStore = keyParser.getKeyStore(pubfile, secfile);
            keyStoreTrustManager = new KeyStoreTrustManager();
            keyStoreTrustManager.refreshTrust(keyStore);
            keyStoreTreeModel = new DefaultTreeModel(keyStore);
            keyringTree.setModel(keyStoreTreeModel); 
            jScrollPane3.setViewportView(keyringTree);
            keyringTree.setCellRenderer(new KeyStoreTreeCellRenderer(true));
        } catch (KeyringStructureException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,
                    "The keyring structure is not valid:\n'" + e.getMessage() + "'",
                    "Keyring Structure Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /** method to set up a barebones results tree model */
    private void loadResultsModel() {
        results = new KeyStore();
        resultsTreeModel = new DefaultTreeModel(results);
        resultsTree.setModel(resultsTreeModel); 
        jScrollPane5.setViewportView(resultsTree); 
        resultsTree.setCellRenderer(new KeyStoreTreeCellRenderer(false));
    }
    
    /** Method to load (or re-load) key-search related components */
    private void loadKeySearchComponents() {
        // set up the 'search by' combo box
        keySearchByComboBox.setModel(new DefaultComboBoxModel(searchCriteria));
        keySearchByComboBox.setSelectedIndex(0);
        keySearchNameField.setEnabled(true);
        keySearchNameLabel.setEnabled(true);
        keySearchEmailField.setEnabled(true);
        keySearchEmailLabel.setEnabled(true);
        keySearchKeyIDField.setEnabled(false);
        keySearchKeyIDLabel.setEnabled(false);
        keySearchFreeTextField.setEnabled(false);
        keySearchFreeTextLabel.setEnabled(false);
        
        // set up the 'search in' combo box
        KeySourceListModel publicList = 
                (KeySourceListModel)publicKeySourcesList.getModel();
    	List keyHandlers = new ArrayList();
    	for (int i = 0; i < publicList.getSize(); ++i) {
    		KeyHandler kh = (KeyHandler)publicList.getElementAt(i);
    		if (kh instanceof OpenPGPHKPPublicKeyServer) {
                    keyHandlers.add(kh);
                } else if (kh instanceof OpenPGPKeyFile) {
                    keyHandlers.add(kh);
                }
    	}
    	KeySourceListModel secretList = 
            (KeySourceListModel)secretKeySourcesList.getModel();
    	for (int i = 0; i < secretList.getSize(); ++i) {
    		KeyHandler kh = (KeyHandler)secretList.getElementAt(i);
    		if (kh instanceof OpenPGPHKPPublicKeyServer) {
                    keyHandlers.add(kh);
                } else if (kh instanceof OpenPGPKeyFile) {
                    keyHandlers.add(kh);
                }
    	}
        keySearchComboBox.setModel(
                new DefaultComboBoxModel(keyHandlers.toArray()));
        if (keyHandlers.size() > 0) keySearchComboBox.setSelectedIndex(0);
    }
    
    /** Method to return the symmetric algorithms currently selected in the
     * keypair generation dialog box, and install them in readable String form
     * in the default symmetric algorithm combo box.
     * @return array of Strings, each representing a symmetric algorithm, or
     * null if no symmetric algorithms are selected.
     */
    private String[] populateDefaultSymAlgComboBox() {
        String[] symAlgorithms = new String[8];
        int count = 0;
        // add the preferred symmetric algorithms, Triple-DES (mandatory) first
        if (genKeyCipherPrefs_TRIPLEDES.isSelected()) 
            symAlgorithms[count++] = "3DES";
        if (genKeyCipherPrefs_IDEA.isSelected()) 
            symAlgorithms[count++] = "IDEA";
        if (genKeyCipherPrefs_CAST5.isSelected()) 
            symAlgorithms[count++] = "CAST5";
        if (genKeyCipherPrefs_BLOWFISH.isSelected()) 
            symAlgorithms[count++] = "Blowfish";
        if (genKeyCipherPrefs_AES128.isSelected()) 
            symAlgorithms[count++] = "AES-128";
        if (genKeyCipherPrefs_AES192.isSelected()) 
            symAlgorithms[count++] = "AES-192";
        if (genKeyCipherPrefs_AES256.isSelected()) 
            symAlgorithms[count++] = "AES-256";
        if (genKeyCipherPrefs_TWOFISH.isSelected()) 
            symAlgorithms[count++] = "Twofish";
        if (count == 0) {
            symAlgorithms = null;
        } else {
            String[] tmp = new String[count];
            for (int i = 0; i < count; ++i) tmp[i] = symAlgorithms[i];
            symAlgorithms = tmp;
            defaultSymAlgComboBox.setModel(
                    new DefaultComboBoxModel(symAlgorithms));
            defaultSymAlgComboBox.setSelectedIndex(0);
        }
        return symAlgorithms;
    }
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new OpenPGPKeyManager2("").setVisible(true);
//            }
//        });
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addEmailAddressItem;
    private javax.swing.JLabel addEmailLabel;
    private javax.swing.JTextField addEmailTextField;
    private javax.swing.JLabel addNameLabel;
    private javax.swing.JTextField addNameTextField;
    private javax.swing.JMenuItem addSubkeyItem;
    private javax.swing.JButton addUserBindingCancelButton;
    private javax.swing.JDialog addUserBindingDialog;
    private javax.swing.JButton addUserBindingOKButton;
    private javax.swing.JButton chooseSigningKeyCancelButton;
    private javax.swing.JDialog chooseSigningKeyDialog;
    private javax.swing.JButton chooseSigningKeyOKButton;
    private javax.swing.JMenuItem createNewKeyMenuItem;
    private javax.swing.JComboBox defaultSymAlgComboBox;
    private javax.swing.JLabel defaultSymAlgLabel;
    private javax.swing.JMenuItem deleteKeyItem;
    private javax.swing.JMenuItem deleteSigItem;
    private javax.swing.JMenuItem deleteSubkeyItem;
    private javax.swing.JMenuItem deleteUserItem;
    private javax.swing.JPanel emailCriteriaPanel;
    private javax.swing.JMenuItem exportPrivateKeyToAscFileItem;
    private javax.swing.JMenuItem exportPrivateKeyToBinFileItem;
    private javax.swing.JMenuItem exportPrivateKeyringToAscFileItem;
    private javax.swing.JMenuItem exportPrivateKeyringToBinFileItem;
    private javax.swing.JMenuItem exportPublicKeyToAscFileItem;
    private javax.swing.JMenuItem exportPublicKeyToBinFileItem;
    private javax.swing.JMenuItem exportPublicKeyToKeyServerItem;
    private javax.swing.JMenuItem exportPublicKeyringToAscFileItem;
    private javax.swing.JMenuItem exportPublicKeyringToBinFileItem;
    private javax.swing.JCheckBox genKeyCipherPrefs_AES128;
    private javax.swing.JCheckBox genKeyCipherPrefs_AES192;
    private javax.swing.JCheckBox genKeyCipherPrefs_AES256;
    private javax.swing.JCheckBox genKeyCipherPrefs_BLOWFISH;
    private javax.swing.JCheckBox genKeyCipherPrefs_CAST5;
    private javax.swing.JCheckBox genKeyCipherPrefs_IDEA;
    private javax.swing.JCheckBox genKeyCipherPrefs_TRIPLEDES;
    private javax.swing.JCheckBox genKeyCipherPrefs_TWOFISH;
    private javax.swing.JComboBox genSubkeyAlgorithmComboBox;
    private javax.swing.JLabel genSubkeyAlgorithmLabel;
    private javax.swing.JButton genSubkeyCancelButton;
    private javax.swing.JButton genSubkeyOKButton;
    private javax.swing.JPasswordField genSubkeyPassphraseField1;
    private javax.swing.JPasswordField genSubkeyPassphraseField2;
    private javax.swing.JLabel genSubkeyPassphraseLabel1;
    private javax.swing.JLabel genSubkeyPassphraseLabel2;
    private javax.swing.JComboBox genSubkeySizeComboBox;
    private javax.swing.JLabel genSubkeySizeLabel;
    private javax.swing.JButton generateKeyPairCancelButton;
    private javax.swing.JButton generateKeyPairOKButton;
    private javax.swing.JDialog generateKeypairDialog;
    private javax.swing.JButton generateNewKeypairButton;
    private javax.swing.JDialog generateSubkeyDialog;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel65;
    private javax.swing.JPanel jPanel66;
    private javax.swing.JPanel jPanel67;
    private javax.swing.JPanel jPanel68;
    private javax.swing.JPanel jPanel69;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel70;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JPanel keyIDCriteriaPanel;
    private javax.swing.JPopupMenu keyPopupMenu;
    private javax.swing.JTextField keyPropsAlgorithmField;
    private javax.swing.JLabel keyPropsAlgorithmLabel;
    private javax.swing.JCheckBox keyPropsCipherPrefs1;
    private javax.swing.JCheckBox keyPropsCipherPrefs10;
    private javax.swing.JCheckBox keyPropsCipherPrefs2;
    private javax.swing.JCheckBox keyPropsCipherPrefs3;
    private javax.swing.JCheckBox keyPropsCipherPrefs4;
    private javax.swing.JCheckBox keyPropsCipherPrefs7;
    private javax.swing.JCheckBox keyPropsCipherPrefs8;
    private javax.swing.JCheckBox keyPropsCipherPrefs9;
    private javax.swing.JCheckBox keyPropsCompressPrefs0;
    private javax.swing.JCheckBox keyPropsCompressPrefs1;
    private javax.swing.JCheckBox keyPropsCompressPrefs2;
    private javax.swing.JCheckBox keyPropsCompressPrefs3;
    private javax.swing.JTextField keyPropsCreDateField;
    private javax.swing.JLabel keyPropsCreDateLabel;
    private javax.swing.JDialog keyPropsDialog;
    private javax.swing.JTextField keyPropsExpDateField;
    private javax.swing.JLabel keyPropsExpDateLabel;
    private javax.swing.JTextField keyPropsFingerprintField;
    private javax.swing.JCheckBox keyPropsHashPrefs1;
    private javax.swing.JCheckBox keyPropsHashPrefs10;
    private javax.swing.JCheckBox keyPropsHashPrefs11;
    private javax.swing.JCheckBox keyPropsHashPrefs2;
    private javax.swing.JCheckBox keyPropsHashPrefs3;
    private javax.swing.JCheckBox keyPropsHashPrefs8;
    private javax.swing.JCheckBox keyPropsHashPrefs9;
    private javax.swing.JMenuItem keyPropsItem;
    private javax.swing.JTextField keyPropsKeyIDField;
    private javax.swing.JLabel keyPropsKeyIDLabel;
    private javax.swing.JTextField keyPropsKeySizeField;
    private javax.swing.JLabel keyPropsKeySizeLabel;
    private javax.swing.JTextField keyPropsKeyStatusField;
    private javax.swing.JLabel keyPropsKeyStatusLabel;
    private javax.swing.JButton keyPropsOKButton;
    private javax.swing.JComboBox keyPropsOwnerTrustComboBox;
    private javax.swing.JLabel keyPropsOwnerTrustLabel;
    private javax.swing.JButton keySearchButton;
    private javax.swing.JComboBox keySearchByComboBox;
    private javax.swing.JLabel keySearchByLabel;
    private javax.swing.JComboBox keySearchComboBox;
    private javax.swing.JTextField keySearchEmailField;
    private javax.swing.JLabel keySearchEmailLabel;
    private javax.swing.JTextField keySearchFreeTextField;
    private javax.swing.JLabel keySearchFreeTextLabel;
    private javax.swing.JLabel keySearchInLabel;
    private javax.swing.JTextField keySearchKeyIDField;
    private javax.swing.JLabel keySearchKeyIDLabel;
    private javax.swing.JTextField keySearchNameField;
    private javax.swing.JLabel keySearchNameLabel;
    private javax.swing.JLabel keySearchResultsLabel;
    private javax.swing.JPopupMenu keyringPopupMenu;
    private javax.swing.JTree keyringTree;
    private javax.swing.JComboBox primaryKeyAlgorithmComboBox;
    private javax.swing.JLabel primaryKeyAlgorithmLabel;
    private javax.swing.JComboBox primaryKeySizeComboBox;
    private javax.swing.JLabel primaryKeySizeLabel;
    private javax.swing.JMenu privateKeyExportMenu;
    private javax.swing.JMenu privateKeyringExportMenu;
    private javax.swing.JCheckBox privateKeysOnlyCheckBox;
    private javax.swing.JMenu publicKeyExportMenu;
    private javax.swing.JList publicKeySourcesList;
    private javax.swing.JMenu publicKeyringExportMenu;
    private javax.swing.JMenuItem resultsAddToKeyringItem;
    private javax.swing.JPopupMenu resultsKeyPopupMenu;
    private javax.swing.JMenuItem resultsKeyPropsItem;
    private javax.swing.JPopupMenu resultsSigPopupMenu;
    private javax.swing.JMenuItem resultsSigPropsItem;
    private javax.swing.JPopupMenu resultsSubkeyPopupMenu;
    private javax.swing.JMenuItem resultsSubkeyPropsItem;
    private javax.swing.JTree resultsTree;
    private javax.swing.JMenuItem revokePrimarySigningKeyItem;
    private javax.swing.JMenuItem revokeSigItem;
    private javax.swing.JMenuItem revokeSubkeyItem;
    private javax.swing.JList secretKeySourcesList;
    private javax.swing.JCheckBox sigIsExportableCheckBox;
    private javax.swing.JPopupMenu sigPopupMenu;
    private javax.swing.JTextField sigPropsCreDateField;
    private javax.swing.JLabel sigPropsCreDateLabel;
    private javax.swing.JDialog sigPropsDialog;
    private javax.swing.JTextField sigPropsExpDateField;
    private javax.swing.JLabel sigPropsExpDateLabel;
    private javax.swing.JTextField sigPropsExportableField;
    private javax.swing.JLabel sigPropsExportableLabel;
    private javax.swing.JMenuItem sigPropsItem;
    private javax.swing.JTextField sigPropsKeyIDField;
    private javax.swing.JLabel sigPropsKeyIDLabel;
    private javax.swing.JLabel sigPropsMessageLabel;
    private javax.swing.JButton sigPropsOKButton;
    private javax.swing.JTextField sigPropsSigTrustField;
    private javax.swing.JLabel sigPropsSigTrustLabel;
    private javax.swing.JTextField sigPropsTrustTypeField;
    private javax.swing.JLabel sigPropsTrustTypeLabel;
    private javax.swing.JTextField sigPropsUserEmailField;
    private javax.swing.JLabel sigPropsUserEmailLabel;
    private javax.swing.JTextField sigPropsUserNameField;
    private javax.swing.JLabel sigPropsUserNameLabel;
    private javax.swing.JMenuItem signUserBindingItem;
    private javax.swing.JComboBox signingKeyComboBox;
    private javax.swing.JComboBox subkeyAlgorithmComboBox;
    private javax.swing.JLabel subkeyAlgorithmLabel;
    private javax.swing.JPopupMenu subkeyPopupMenu;
    private javax.swing.JTextField subkeyPropsAlgorithmField;
    private javax.swing.JLabel subkeyPropsAlgorithmLabel;
    private javax.swing.JTextField subkeyPropsCreDateField;
    private javax.swing.JLabel subkeyPropsCreDateLabel;
    private javax.swing.JDialog subkeyPropsDialog;
    private javax.swing.JTextField subkeyPropsExpDateField;
    private javax.swing.JLabel subkeyPropsExpDateLabel;
    private javax.swing.JTextField subkeyPropsFingerprintField;
    private javax.swing.JMenuItem subkeyPropsItem;
    private javax.swing.JTextField subkeyPropsKeyIDField;
    private javax.swing.JLabel subkeyPropsKeyIDLabel;
    private javax.swing.JTextField subkeyPropsKeySizeField;
    private javax.swing.JLabel subkeyPropsKeySizeLabel;
    private javax.swing.JLabel subkeyPropsMessageLabel;
    private javax.swing.JButton subkeyPropsOKButton;
    private javax.swing.JComboBox subkeySizeComboBox;
    private javax.swing.JLabel subkeySizeLabel;
    private javax.swing.JComboBox trustAmountComboBox;
    private javax.swing.JLabel trustAmountLabel;
    private javax.swing.JComboBox trustDepthComboBox;
    private javax.swing.JLabel trustDepthLabel;
    private javax.swing.JCheckBox trustedIntroducerCheckbox;
    private javax.swing.JPopupMenu userPopupMenu;
    // End of variables declaration//GEN-END:variables
 
    // user-defined variables
    private boolean keyStoreHasChanged = false;
    private String pubPathCached, secPathCached;
    private ConfigurationData configurationData;
    private KeyParser keyParser;
    private KeyStore keyStore;
    private DefaultTreeModel keyStoreTreeModel;
    private KeyStore results;
    private DefaultTreeModel resultsTreeModel;
    private KeyStoreTrustManager keyStoreTrustManager;
    private GenericFileFilter asciiFileFilter = 
            new GenericFileFilter("ASCII Key Files (*.asc)", ".asc");
    private GenericFileFilter binaryFileFilter = 
            new GenericFileFilter("Binary Key Files (*.pgp)", ".pgp");
    private DateFormat dateFormatter = DateFormat.getDateInstance(
            DateFormat.SHORT);
    
    // reasons for key revocation
    private final static String[] keyRevocationReasons = {
        "No reason specified",
        "Key is superseded",
        "Key material has been compromised",
        "Key is no longer used"
    };
    // reasons for certification revocation
    private final static String[] certRevocationReasons = {
        "No reason specified",
        "User ID information is no longer valid"
    };
    // search criteria possibilities
    private final static String[] searchCriteria = {
        "Email Address",
        "Key ID",
        "Free Text"
    };
    
    /** Private inner class to filter files according to the extension */
    private class GenericFileFilter extends javax.swing.filechooser.FileFilter {
        
        private String description;
        private String fileEnding;
        
        /** Constructor - allows a specifiable filter type */
        public GenericFileFilter(String description, String fileEnding) {
            this.description = description;
            this.fileEnding = fileEnding;
        }
        
        /** The description of this filter */
        public String getDescription() {
            return description;
        }
        
        /** Whether of not this file is acceptable to this filter */
        public boolean accept(File f) {
            boolean isAcceptable = false;
            if (f.isDirectory()) 
                isAcceptable = true;
            else {
                if (f != null) {
                    if (f.getName().toLowerCase().endsWith(fileEnding)) {
                        isAcceptable = true;
                    }
                }
            }
            return isAcceptable;
        }
    }
    
    /** Inner class to populate the key source list box. */
    public class KeySourceListModel extends javax.swing.AbstractListModel {
        
        private Vector sources;
        
        public KeySourceListModel(KeyHandler [] list) {
            sources = new Vector();
            
            if (list!=null) {
                for (int n = 0; n < list.length; n++)
                    sources.add(list[n]);
            }
        }
        
        protected void notifyListeners() {
            ListDataListener [] listeners = getListDataListeners(); 
            for (int n=0; n < listeners.length; n++)
                listeners[n].contentsChanged(new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, getSize()));

        }
        
        public int getSize() {
            return sources.size();
        }
        
        public Object getElementAt(int i) {
            return sources.elementAt(i);
        }
        
        public void demote(int i) {
            KeyHandler tmp = (KeyHandler)sources.elementAt(i);
            
            if (i+1<sources.size()) {
               sources.removeElementAt(i); 
               sources.insertElementAt(tmp, i+1);
            }
            notifyListeners();
        }
        
        public void promote(int i) {
            KeyHandler tmp = (KeyHandler)sources.elementAt(i);
            
            if (i-1>=0) {
                sources.removeElementAt(i);
                sources.insertElementAt(tmp, i-1);
            }
            notifyListeners();
        }
        
        public void remove(int i) {
            if (i<sources.size())
                sources.removeElementAt(i);
            notifyListeners();
        }
        
        public void add(KeyHandler kh) {
            sources.add(kh);
            notifyListeners();
        }
        
        public void set(int i, KeyHandler kh) {
            if (i<sources.size())
                sources.setElementAt(kh, i);
            notifyListeners();
        }
    }
}